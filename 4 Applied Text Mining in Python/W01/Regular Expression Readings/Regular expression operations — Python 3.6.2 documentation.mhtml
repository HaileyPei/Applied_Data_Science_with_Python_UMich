From: <Saved by Blink>
Subject: 6.2. re ? Regular expression operations ? Python 3.6.2 documentation
Date: Wed, 1 Aug 2017 12:50:13 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--FETIAD2UH2Fhb0MSFrWeatburud8jEgIdVow5ihmts----"

------MultipartBoundary--FETIAD2UH2Fhb0MSFrWeatburud8jEgIdVow5ihmts----
Content-Type: text/html
Content-ID: <frame-74-d533eaab-40f8-462f-9cd7-3757c4e1bb5f@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/library/re.html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.=
w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns=3D"http://www.w3.=
org/1999/xhtml"><head><meta http-equiv=3D"Content-Type" content=3D"text/htm=
l; charset=3DUTF-8">
   =20
   =20
    <title>6.2. re =E2=80=94 Regular expression operations =E2=80=94 Python=
 3.6.2 documentation</title>
   =20
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3/_static/pydo=
ctheme.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3/_static/pygm=
ents.css" type=3D"text/css">
   =20
   =20
   =20
   =20
   =20
   =20
    <link rel=3D"search" type=3D"application/opensearchdescription+xml" tit=
le=3D"Search within Python 3.6.2 documentation" href=3D"https://docs.python=
.org/3/_static/opensearch.xml">
    <link rel=3D"author" title=3D"About these documents" href=3D"https://do=
cs.python.org/3/about.html">
    <link rel=3D"copyright" title=3D"Copyright" href=3D"https://docs.python=
.org/3/copyright.html">
    <link rel=3D"top" title=3D"Python 3.6.2 documentation" href=3D"https://=
docs.python.org/3/contents.html">
    <link rel=3D"up" title=3D"6. Text Processing Services" href=3D"https://=
docs.python.org/3/library/text.html">
    <link rel=3D"next" title=3D"6.3. difflib =E2=80=94 Helpers for computin=
g deltas" href=3D"https://docs.python.org/3/library/difflib.html">
    <link rel=3D"prev" title=3D"6.1. string =E2=80=94 Common string operati=
ons" href=3D"https://docs.python.org/3/library/string.html">
    <link rel=3D"shortcut icon" type=3D"image/png" href=3D"https://docs.pyt=
hon.org/3/_static/py.png">
    <link rel=3D"canonical" href=3D"https://docs.python.org/3/library/re.ht=
ml">
   =20
   =20
   =20
   =20
   =20
=20

  <style id=3D"style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporat=
ion. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -100px !important;
    width: 200px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style><style type=3D"text/css">
:root .footer > #box[style=3D"width:100%;height:100%;position:fixed;top:0"]
{ display: none !important; }</style></head>
  <body role=3D"document"> =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index" accesskey=3D"I">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/difflib.html" title=
=3D"6.3. difflib =E2=80=94 Helpers for computing deltas" accesskey=3D"N">ne=
xt</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/string.html" title=
=3D"6.1. string =E2=80=94 Common string operations" accesskey=3D"P">previou=
s</a> |</li>
        <li><img src=3D"https://docs.python.org/3/_static/py.png" alt=3D"" =
style=3D"vertical-align: middle; margin-top: -1px"></li>
        <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
        <li>
          <span class=3D"version_switcher_placeholder"><select disabled=3D"=
"><option value=3D"3.7">dev (3.7)</option><option value=3D"3.6" selected=3D=
"selected">3.6.2</option><option value=3D"3.5">3.5</option><option value=3D=
"3.4">3.4</option><option value=3D"3.3">3.3</option><option value=3D"2.7">2=
.7</option></select></span>
          <a href=3D"https://docs.python.org/3/index.html">Documentation </=
a> =C2=BB
        </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/library/index.html">The Python Standard Library</a> =C2=BB</li>
          <li class=3D"nav-item nav-item-2"><a href=3D"https://docs.python.=
org/3/library/text.html" accesskey=3D"U">6. Text Processing Services</a> =
=C2=BB</li>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" style=3D"display: inline;" role=3D"search"=
>
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get" style=3D"display: inline;">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q" disa=
bled=3D"">
          <input type=3D"submit" value=3D"Go" disabled=3D"">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div>   =20

    <div class=3D"document">
      <div class=3D"documentwrapper">
        <div class=3D"bodywrapper">
          <div class=3D"body" role=3D"main">
           =20
  <div class=3D"section" id=3D"module-re">
<span id=3D"re-regular-expression-operations"></span><h1>6.2. <a class=3D"r=
eference internal" href=3D"https://docs.python.org/3/library/re.html#module=
-re" title=3D"re: Regular expression operations."><code class=3D"xref py py=
-mod docutils literal"><span class=3D"pre">re</span></code></a> =E2=80=94 R=
egular expression operations<a class=3D"headerlink" href=3D"https://docs.py=
thon.org/3/library/re.html#module-re" title=3D"Permalink to this headline">=
=C2=B6</a></h1>
<p><strong>Source code:</strong> <a class=3D"reference external" href=3D"ht=
tps://github.com/python/cpython/tree/3.6/Lib/re.py">Lib/re.py</a></p>
<hr class=3D"docutils">
<p>This module provides regular expression matching operations similar to
those found in Perl.</p>
<p>Both patterns and strings to be searched can be Unicode strings as well =
as
8-bit strings. However, Unicode strings and 8-bit strings cannot be mixed:
that is, you cannot match a Unicode string with a byte pattern or
vice-versa; similarly, when asking for a substitution, the replacement
string must be of the same type as both the pattern and the search string.<=
/p>
<p>Regular expressions use the backslash character (<code class=3D"docutils=
 literal"><span class=3D"pre">'\'</span></code>) to indicate
special forms or to allow special characters to be used without invoking
their special meaning.  This collides with Python=E2=80=99s usage of the sa=
me
character for the same purpose in string literals; for example, to match
a literal backslash, one might have to write <code class=3D"docutils litera=
l"><span class=3D"pre">'\\\\'</span></code> as the pattern
string, because the regular expression must be <code class=3D"docutils lite=
ral"><span class=3D"pre">\\</span></code>, and each
backslash must be expressed as <code class=3D"docutils literal"><span class=
=3D"pre">\\</span></code> inside a regular Python string
literal.</p>
<p>The solution is to use Python=E2=80=99s raw string notation for regular =
expression
patterns; backslashes are not handled in any special way in a string litera=
l
prefixed with <code class=3D"docutils literal"><span class=3D"pre">'r'</spa=
n></code>.  So <code class=3D"docutils literal"><span class=3D"pre">r"\n"</=
span></code> is a two-character string containing
<code class=3D"docutils literal"><span class=3D"pre">'\'</span></code> and =
<code class=3D"docutils literal"><span class=3D"pre">'n'</span></code>, whi=
le <code class=3D"docutils literal"><span class=3D"pre">"\n"</span></code> =
is a one-character string containing a
newline.  Usually patterns will be expressed in Python code using this raw
string notation.</p>
<p>It is important to note that most regular expression operations are avai=
lable as
module-level functions and methods on
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re-objects"><span>compiled regular expressions</span></a>.  The func=
tions are shortcuts
that don=E2=80=99t require you to compile a regex object first, but miss so=
me
fine-tuning parameters.</p>
<div class=3D"admonition seealso">
<p class=3D"first admonition-title">See also</p>
<p class=3D"last">The third-party <a class=3D"reference external" href=3D"h=
ttps://pypi.python.org/pypi/regex/">regex</a> module,
which has an API compatible with the standard library <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/re.html#module-re" tit=
le=3D"re: Regular expression operations."><code class=3D"xref py py-mod doc=
utils literal"><span class=3D"pre">re</span></code></a> module,
but offers additional functionality and a more thorough Unicode support.</p=
>
</div>
<div class=3D"section" id=3D"regular-expression-syntax">
<span id=3D"re-syntax"></span><h2>6.2.1. Regular Expression Syntax<a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#regular-e=
xpression-syntax" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>A regular expression (or RE) specifies a set of strings that matches it;=
 the
functions in this module let you check if a particular string matches a giv=
en
regular expression (or if a given regular expression matches a particular
string, which comes down to the same thing).</p>
<p>Regular expressions can be concatenated to form new regular expressions;=
 if <em>A</em>
and <em>B</em> are both regular expressions, then <em>AB</em> is also a reg=
ular expression.
In general, if a string <em>p</em> matches <em>A</em> and another string <e=
m>q</em> matches <em>B</em>, the
string <em>pq</em> will match AB.  This holds unless <em>A</em> or <em>B</e=
m> contain low precedence
operations; boundary conditions between <em>A</em> and <em>B</em>; or have =
numbered group
references.  Thus, complex expressions can easily be constructed from simpl=
er
primitive expressions like the ones described here.  For details of the the=
ory
and implementation of regular expressions, consult the Friedl book referenc=
ed
above, or almost any textbook about compiler construction.</p>
<p>A brief explanation of the format of regular expressions follows.  For f=
urther
information and a gentler presentation, consult the <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/howto/regex.html#regex-howto"><s=
pan>Regular Expression HOWTO</span></a>.</p>
<p>Regular expressions can contain both special and ordinary characters. Mo=
st
ordinary characters, like <code class=3D"docutils literal"><span class=3D"p=
re">'A'</span></code>, <code class=3D"docutils literal"><span class=3D"pre"=
>'a'</span></code>, or <code class=3D"docutils literal"><span class=3D"pre"=
>'0'</span></code>, are the simplest regular
expressions; they simply match themselves.  You can concatenate ordinary
characters, so <code class=3D"docutils literal"><span class=3D"pre">last</s=
pan></code> matches the string <code class=3D"docutils literal"><span class=
=3D"pre">'last'</span></code>.  (In the rest of this
section, we=E2=80=99ll write RE=E2=80=99s in <code class=3D"docutils litera=
l"><span class=3D"pre">this</span> <span class=3D"pre">special</span> <span=
 class=3D"pre">style</span></code>, usually without quotes, and
strings to be matched <code class=3D"docutils literal"><span class=3D"pre">=
'in</span> <span class=3D"pre">single</span> <span class=3D"pre">quotes'</s=
pan></code>.)</p>
<p>Some characters, like <code class=3D"docutils literal"><span class=3D"pr=
e">'|'</span></code> or <code class=3D"docutils literal"><span class=3D"pre=
">'('</span></code>, are special. Special
characters either stand for classes of ordinary characters, or affect
how the regular expressions around them are interpreted. Regular
expression pattern strings may not contain null bytes, but can specify
the null byte using a <code class=3D"docutils literal"><span class=3D"pre">=
\number</span></code> notation such as <code class=3D"docutils literal"><sp=
an class=3D"pre">'\x00'</span></code>.</p>
<p>Repetition qualifiers (<code class=3D"docutils literal"><span class=3D"p=
re">*</span></code>, <code class=3D"docutils literal"><span class=3D"pre">+=
</span></code>, <code class=3D"docutils literal"><span class=3D"pre">?</spa=
n></code>, <code class=3D"docutils literal"><span class=3D"pre">{m,n}</span=
></code>, etc) cannot be
directly nested. This avoids ambiguity with the non-greedy modifier suffix
<code class=3D"docutils literal"><span class=3D"pre">?</span></code>, and w=
ith other modifiers in other implementations. To apply a second
repetition to an inner repetition, parentheses may be used. For example,
the expression <code class=3D"docutils literal"><span class=3D"pre">(?:a{6}=
)*</span></code> matches any multiple of six <code class=3D"docutils litera=
l"><span class=3D"pre">'a'</span></code> characters.</p>
<p>The special characters are:</p>
<dl class=3D"docutils">
<dt><code class=3D"docutils literal"><span class=3D"pre">'.'</span></code><=
/dt>
<dd>(Dot.)  In the default mode, this matches any character except a newlin=
e.  If
the <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#re.DOTALL" title=3D"re.DOTALL"><code class=3D"xref py py-const d=
ocutils literal"><span class=3D"pre">DOTALL</span></code></a> flag has been=
 specified, this matches any character
including a newline.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">'^'</span></code><=
/dt>
<dd>(Caret.)  Matches the start of the string, and in <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/re.html#re.MULTILINE" =
title=3D"re.MULTILINE"><code class=3D"xref py py-const docutils literal"><s=
pan class=3D"pre">MULTILINE</span></code></a> mode also
matches immediately after each newline.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">'$'</span></code><=
/dt>
<dd>Matches the end of the string or just before the newline at the end of =
the
string, and in <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/re.html#re.MULTILINE" title=3D"re.MULTILINE"><code class=3D"x=
ref py py-const docutils literal"><span class=3D"pre">MULTILINE</span></cod=
e></a> mode also matches before a newline.  <code class=3D"docutils literal=
"><span class=3D"pre">foo</span></code>
matches both =E2=80=98foo=E2=80=99 and =E2=80=98foobar=E2=80=99, while the =
regular expression <code class=3D"docutils literal"><span class=3D"pre">foo=
$</span></code> matches
only =E2=80=98foo=E2=80=99.  More interestingly, searching for <code class=
=3D"docutils literal"><span class=3D"pre">foo.$</span></code> in <code clas=
s=3D"docutils literal"><span class=3D"pre">'foo1\nfoo2\n'</span></code>
matches =E2=80=98foo2=E2=80=99 normally, but =E2=80=98foo1=E2=80=99 in <a c=
lass=3D"reference internal" href=3D"https://docs.python.org/3/library/re.ht=
ml#re.MULTILINE" title=3D"re.MULTILINE"><code class=3D"xref py py-const doc=
utils literal"><span class=3D"pre">MULTILINE</span></code></a> mode; search=
ing for
a single <code class=3D"docutils literal"><span class=3D"pre">$</span></cod=
e> in <code class=3D"docutils literal"><span class=3D"pre">'foo\n'</span></=
code> will find two (empty) matches: one just before
the newline, and one at the end of the string.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">'*'</span></code><=
/dt>
<dd>Causes the resulting RE to match 0 or more repetitions of the preceding=
 RE, as
many repetitions as are possible.  <code class=3D"docutils literal"><span c=
lass=3D"pre">ab*</span></code> will match =E2=80=98a=E2=80=99, =E2=80=98ab=
=E2=80=99, or =E2=80=98a=E2=80=99 followed
by any number of =E2=80=98b=E2=80=99s.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">'+'</span></code><=
/dt>
<dd>Causes the resulting RE to match 1 or more repetitions of the preceding=
 RE.
<code class=3D"docutils literal"><span class=3D"pre">ab+</span></code> will=
 match =E2=80=98a=E2=80=99 followed by any non-zero number of =E2=80=98b=E2=
=80=99s; it will not
match just =E2=80=98a=E2=80=99.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">'?'</span></code><=
/dt>
<dd>Causes the resulting RE to match 0 or 1 repetitions of the preceding RE=
.
<code class=3D"docutils literal"><span class=3D"pre">ab?</span></code> will=
 match either =E2=80=98a=E2=80=99 or =E2=80=98ab=E2=80=99.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">*?</span></code>, =
<code class=3D"docutils literal"><span class=3D"pre">+?</span></code>, <cod=
e class=3D"docutils literal"><span class=3D"pre">??</span></code></dt>
<dd>The <code class=3D"docutils literal"><span class=3D"pre">'*'</span></co=
de>, <code class=3D"docutils literal"><span class=3D"pre">'+'</span></code>=
, and <code class=3D"docutils literal"><span class=3D"pre">'?'</span></code=
> qualifiers are all <em class=3D"dfn">greedy</em>; they match
as much text as possible.  Sometimes this behaviour isn=E2=80=99t desired; =
if the RE
<code class=3D"docutils literal"><span class=3D"pre">&lt;.*&gt;</span></cod=
e> is matched against <code class=3D"docutils literal"><span class=3D"pre">=
&lt;a&gt;</span> <span class=3D"pre">b</span> <span class=3D"pre">&lt;c&gt;=
</span></code>, it will match the entire
string, and not just <code class=3D"docutils literal"><span class=3D"pre">&=
lt;a&gt;</span></code>.  Adding <code class=3D"docutils literal"><span clas=
s=3D"pre">?</span></code> after the qualifier makes it
perform the match in <em class=3D"dfn">non-greedy</em> or <em class=3D"dfn"=
>minimal</em> fashion; as <em>few</em>
characters as possible will be matched.  Using the RE <code class=3D"docuti=
ls literal"><span class=3D"pre">&lt;.*?&gt;</span></code> will match
only <code class=3D"docutils literal"><span class=3D"pre">&lt;a&gt;</span><=
/code>.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">{m}</span></code><=
/dt>
<dd>Specifies that exactly <em>m</em> copies of the previous RE should be m=
atched; fewer
matches cause the entire RE not to match.  For example, <code class=3D"docu=
tils literal"><span class=3D"pre">a{6}</span></code> will match
exactly six <code class=3D"docutils literal"><span class=3D"pre">'a'</span>=
</code> characters, but not five.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">{m,n}</span></code=
></dt>
<dd>Causes the resulting RE to match from <em>m</em> to <em>n</em> repetiti=
ons of the preceding
RE, attempting to match as many repetitions as possible.  For example,
<code class=3D"docutils literal"><span class=3D"pre">a{3,5}</span></code> w=
ill match from 3 to 5 <code class=3D"docutils literal"><span class=3D"pre">=
'a'</span></code> characters.  Omitting <em>m</em> specifies a
lower bound of zero,  and omitting <em>n</em> specifies an infinite upper b=
ound.  As an
example, <code class=3D"docutils literal"><span class=3D"pre">a{4,}b</span>=
</code> will match <code class=3D"docutils literal"><span class=3D"pre">aaa=
ab</span></code> or a thousand <code class=3D"docutils literal"><span class=
=3D"pre">'a'</span></code> characters
followed by a <code class=3D"docutils literal"><span class=3D"pre">b</span>=
</code>, but not <code class=3D"docutils literal"><span class=3D"pre">aaab<=
/span></code>. The comma may not be omitted or the
modifier would be confused with the previously described form.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">{m,n}?</span></cod=
e></dt>
<dd>Causes the resulting RE to match from <em>m</em> to <em>n</em> repetiti=
ons of the preceding
RE, attempting to match as <em>few</em> repetitions as possible.  This is t=
he
non-greedy version of the previous qualifier.  For example, on the
6-character string <code class=3D"docutils literal"><span class=3D"pre">'aa=
aaaa'</span></code>, <code class=3D"docutils literal"><span class=3D"pre">a=
{3,5}</span></code> will match 5 <code class=3D"docutils literal"><span cla=
ss=3D"pre">'a'</span></code> characters,
while <code class=3D"docutils literal"><span class=3D"pre">a{3,5}?</span></=
code> will only match 3 characters.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">'\'</span></code><=
/dt>
<dd><p class=3D"first">Either escapes special characters (permitting you to=
 match characters like
<code class=3D"docutils literal"><span class=3D"pre">'*'</span></code>, <co=
de class=3D"docutils literal"><span class=3D"pre">'?'</span></code>, and so=
 forth), or signals a special sequence; special
sequences are discussed below.</p>
<p class=3D"last">If you=E2=80=99re not using a raw string to express the p=
attern, remember that Python
also uses the backslash as an escape sequence in string literals; if the es=
cape
sequence isn=E2=80=99t recognized by Python=E2=80=99s parser, the backslash=
 and subsequent
character are included in the resulting string.  However, if Python would
recognize the resulting sequence, the backslash should be repeated twice.  =
This
is complicated and hard to understand, so it=E2=80=99s highly recommended t=
hat you use
raw strings for all but the simplest expressions.</p>
</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">[]</span></code></=
dt>
<dd><p class=3D"first">Used to indicate a set of characters.  In a set:</p>
<ul class=3D"last simple">
<li>Characters can be listed individually, e.g. <code class=3D"docutils lit=
eral"><span class=3D"pre">[amk]</span></code> will match <code class=3D"doc=
utils literal"><span class=3D"pre">'a'</span></code>,
<code class=3D"docutils literal"><span class=3D"pre">'m'</span></code>, or =
<code class=3D"docutils literal"><span class=3D"pre">'k'</span></code>.</li=
>
<li>Ranges of characters can be indicated by giving two characters and sepa=
rating
them by a <code class=3D"docutils literal"><span class=3D"pre">'-'</span></=
code>, for example <code class=3D"docutils literal"><span class=3D"pre">[a-=
z]</span></code> will match any lowercase ASCII letter,
<code class=3D"docutils literal"><span class=3D"pre">[0-5][0-9]</span></cod=
e> will match all the two-digits numbers from <code class=3D"docutils liter=
al"><span class=3D"pre">00</span></code> to <code class=3D"docutils literal=
"><span class=3D"pre">59</span></code>, and
<code class=3D"docutils literal"><span class=3D"pre">[0-9A-Fa-f]</span></co=
de> will match any hexadecimal digit.  If <code class=3D"docutils literal">=
<span class=3D"pre">-</span></code> is escaped (e.g.
<code class=3D"docutils literal"><span class=3D"pre">[a\-z]</span></code>) =
or if it=E2=80=99s placed as the first or last character (e.g. <code class=
=3D"docutils literal"><span class=3D"pre">[a-]</span></code>),
it will match a literal <code class=3D"docutils literal"><span class=3D"pre=
">'-'</span></code>.</li>
<li>Special characters lose their special meaning inside sets.  For example=
,
<code class=3D"docutils literal"><span class=3D"pre">[(+*)]</span></code> w=
ill match any of the literal characters <code class=3D"docutils literal"><s=
pan class=3D"pre">'('</span></code>, <code class=3D"docutils literal"><span=
 class=3D"pre">'+'</span></code>,
<code class=3D"docutils literal"><span class=3D"pre">'*'</span></code>, or =
<code class=3D"docutils literal"><span class=3D"pre">')'</span></code>.</li=
>
<li>Character classes such as <code class=3D"docutils literal"><span class=
=3D"pre">\w</span></code> or <code class=3D"docutils literal"><span class=
=3D"pre">\S</span></code> (defined below) are also accepted
inside a set, although the characters they match depends on whether
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.ASCII" title=3D"re.ASCII"><code class=3D"xref py py-const docutil=
s literal"><span class=3D"pre">ASCII</span></code></a> or <a class=3D"refer=
ence internal" href=3D"https://docs.python.org/3/library/re.html#re.LOCALE"=
 title=3D"re.LOCALE"><code class=3D"xref py py-const docutils literal"><spa=
n class=3D"pre">LOCALE</span></code></a> mode is in force.</li>
<li>Characters that are not within a range can be matched by <em class=3D"d=
fn">complementing</em>
the set.  If the first character of the set is <code class=3D"docutils lite=
ral"><span class=3D"pre">'^'</span></code>, all the characters
that are <em>not</em> in the set will be matched.  For example, <code class=
=3D"docutils literal"><span class=3D"pre">[^5]</span></code> will match
any character except <code class=3D"docutils literal"><span class=3D"pre">'=
5'</span></code>, and <code class=3D"docutils literal"><span class=3D"pre">=
[^^]</span></code> will match any character except
<code class=3D"docutils literal"><span class=3D"pre">'^'</span></code>.  <c=
ode class=3D"docutils literal"><span class=3D"pre">^</span></code> has no s=
pecial meaning if it=E2=80=99s not the first character in
the set.</li>
<li>To match a literal <code class=3D"docutils literal"><span class=3D"pre"=
>']'</span></code> inside a set, precede it with a backslash, or
place it at the beginning of the set.  For example, both <code class=3D"doc=
utils literal"><span class=3D"pre">[()[\]{}]</span></code> and
<code class=3D"docutils literal"><span class=3D"pre">[]()[{}]</span></code>=
 will both match a parenthesis.</li>
</ul>
</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">'|'</span></code><=
/dt>
<dd><code class=3D"docutils literal"><span class=3D"pre">A|B</span></code>,=
 where A and B can be arbitrary REs, creates a regular expression that
will match either A or B.  An arbitrary number of REs can be separated by t=
he
<code class=3D"docutils literal"><span class=3D"pre">'|'</span></code> in t=
his way.  This can be used inside groups (see below) as well.  As
the target string is scanned, REs separated by <code class=3D"docutils lite=
ral"><span class=3D"pre">'|'</span></code> are tried from left to
right. When one pattern completely matches, that branch is accepted. This m=
eans
that once <code class=3D"docutils literal"><span class=3D"pre">A</span></co=
de> matches, <code class=3D"docutils literal"><span class=3D"pre">B</span><=
/code> will not be tested further, even if it would
produce a longer overall match.  In other words, the <code class=3D"docutil=
s literal"><span class=3D"pre">'|'</span></code> operator is never
greedy.  To match a literal <code class=3D"docutils literal"><span class=3D=
"pre">'|'</span></code>, use <code class=3D"docutils literal"><span class=
=3D"pre">\|</span></code>, or enclose it inside a
character class, as in <code class=3D"docutils literal"><span class=3D"pre"=
>[|]</span></code>.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(...)</span></code=
></dt>
<dd>Matches whatever regular expression is inside the parentheses, and indi=
cates the
start and end of a group; the contents of a group can be retrieved after a =
match
has been performed, and can be matched later in the string with the <code c=
lass=3D"docutils literal"><span class=3D"pre">\number</span></code>
special sequence, described below.  To match the literals <code class=3D"do=
cutils literal"><span class=3D"pre">'('</span></code> or <code class=3D"doc=
utils literal"><span class=3D"pre">')'</span></code>,
use <code class=3D"docutils literal"><span class=3D"pre">\(</span></code> o=
r <code class=3D"docutils literal"><span class=3D"pre">\)</span></code>, or=
 enclose them inside a character class: <code class=3D"docutils literal"><s=
pan class=3D"pre">[(]</span> <span class=3D"pre">[)]</span></code>.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?...)</span></cod=
e></dt>
<dd>This is an extension notation (a <code class=3D"docutils literal"><span=
 class=3D"pre">'?'</span></code> following a <code class=3D"docutils litera=
l"><span class=3D"pre">'('</span></code> is not meaningful
otherwise).  The first character after the <code class=3D"docutils literal"=
><span class=3D"pre">'?'</span></code> determines what the meaning
and further syntax of the construct is. Extensions usually do not create a =
new
group; <code class=3D"docutils literal"><span class=3D"pre">(?P&lt;name&gt;=
...)</span></code> is the only exception to this rule. Following are the
currently supported extensions.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?aiLmsux)</span><=
/code></dt>
<dd>(One or more letters from the set <code class=3D"docutils literal"><spa=
n class=3D"pre">'a'</span></code>, <code class=3D"docutils literal"><span c=
lass=3D"pre">'i'</span></code>, <code class=3D"docutils literal"><span clas=
s=3D"pre">'L'</span></code>, <code class=3D"docutils literal"><span class=
=3D"pre">'m'</span></code>,
<code class=3D"docutils literal"><span class=3D"pre">'s'</span></code>, <co=
de class=3D"docutils literal"><span class=3D"pre">'u'</span></code>, <code =
class=3D"docutils literal"><span class=3D"pre">'x'</span></code>.)  The gro=
up matches the empty string; the
letters set the corresponding flags: <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/re.html#re.A" title=3D"re.A"><code cl=
ass=3D"xref py py-const docutils literal"><span class=3D"pre">re.A</span></=
code></a> (ASCII-only matching),
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.I" title=3D"re.I"><code class=3D"xref py py-const docutils litera=
l"><span class=3D"pre">re.I</span></code></a> (ignore case), <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/re.html#re.L" t=
itle=3D"re.L"><code class=3D"xref py py-const docutils literal"><span class=
=3D"pre">re.L</span></code></a> (locale dependent),
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.M" title=3D"re.M"><code class=3D"xref py py-const docutils litera=
l"><span class=3D"pre">re.M</span></code></a> (multi-line), <a class=3D"ref=
erence internal" href=3D"https://docs.python.org/3/library/re.html#re.S" ti=
tle=3D"re.S"><code class=3D"xref py py-const docutils literal"><span class=
=3D"pre">re.S</span></code></a> (dot matches all),
and <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#re.X" title=3D"re.X"><code class=3D"xref py py-const docutils li=
teral"><span class=3D"pre">re.X</span></code></a> (verbose), for the entire=
 regular expression. (The
flags are described in <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/library/re.html#contents-of-module-re"><span>Module Contents<=
/span></a>.) This
is useful if you wish to include the flags as part of the regular
expression, instead of passing a <em>flag</em> argument to the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.compile" title=3D"re.compile"><code class=3D"xref py py-func docu=
tils literal"><span class=3D"pre">re.compile()</span></code></a> function. =
 Flags should be used first in the
expression string.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?:...)</span></co=
de></dt>
<dd>A non-capturing version of regular parentheses.  Matches whatever regul=
ar
expression is inside the parentheses, but the substring matched by the grou=
p
<em>cannot</em> be retrieved after performing a match or referenced later i=
n the
pattern.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?imsx-imsx:...)</=
span></code></dt>
<dd><p class=3D"first">(Zero or more letters from the set <code class=3D"do=
cutils literal"><span class=3D"pre">'i'</span></code>, <code class=3D"docut=
ils literal"><span class=3D"pre">'m'</span></code>, <code class=3D"docutils=
 literal"><span class=3D"pre">'s'</span></code>, <code class=3D"docutils li=
teral"><span class=3D"pre">'x'</span></code>,
optionally followed by <code class=3D"docutils literal"><span class=3D"pre"=
>'-'</span></code> followed by one or more letters from the
same set.)  The letters set or removes the corresponding flags:
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.I" title=3D"re.I"><code class=3D"xref py py-const docutils litera=
l"><span class=3D"pre">re.I</span></code></a> (ignore case), <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/re.html#re.M" t=
itle=3D"re.M"><code class=3D"xref py py-const docutils literal"><span class=
=3D"pre">re.M</span></code></a> (multi-line), <a class=3D"reference interna=
l" href=3D"https://docs.python.org/3/library/re.html#re.S" title=3D"re.S"><=
code class=3D"xref py py-const docutils literal"><span class=3D"pre">re.S</=
span></code></a>
(dot matches all), and <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/library/re.html#re.X" title=3D"re.X"><code class=3D"xref py p=
y-const docutils literal"><span class=3D"pre">re.X</span></code></a> (verbo=
se), for the part of the
expression.  (The flags are described in <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/re.html#contents-of-module-re"><spa=
n>Module Contents</span></a>.)</p>
<div class=3D"last versionadded">
<p><span class=3D"versionmodified">New in version 3.6.</span></p>
</div>
</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?P&lt;name&gt;...=
)</span></code></dt>
<dd><p class=3D"first">Similar to regular parentheses, but the substring ma=
tched by the group is
accessible via the symbolic group name <em>name</em>.  Group names must be =
valid
Python identifiers, and each group name must be defined only once within a
regular expression.  A symbolic group is also a numbered group, just as if
the group were not named.</p>
<p>Named groups can be referenced in three contexts.  If the pattern is
<code class=3D"docutils literal"><span class=3D"pre">(?P&lt;quote&gt;['"]).=
*?(?P=3Dquote)</span></code> (i.e. matching a string quoted with either
single or double quotes):</p>
<table border=3D"1" class=3D"last docutils">
<colgroup>
<col width=3D"53%">
<col width=3D"47%">
</colgroup>
<thead valign=3D"bottom">
<tr class=3D"row-odd"><th class=3D"head">Context of reference to group =E2=
=80=9Cquote=E2=80=9D</th>
<th class=3D"head">Ways to reference it</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr class=3D"row-even"><td>in the same pattern itself</td>
<td><ul class=3D"first last simple">
<li><code class=3D"docutils literal"><span class=3D"pre">(?P=3Dquote)</span=
></code> (as shown)</li>
<li><code class=3D"docutils literal"><span class=3D"pre">\1</span></code></=
li>
</ul>
</td>
</tr>
<tr class=3D"row-odd"><td>when processing match object <code class=3D"docut=
ils literal"><span class=3D"pre">m</span></code></td>
<td><ul class=3D"first last simple">
<li><code class=3D"docutils literal"><span class=3D"pre">m.group('quote')</=
span></code></li>
<li><code class=3D"docutils literal"><span class=3D"pre">m.end('quote')</sp=
an></code> (etc.)</li>
</ul>
</td>
</tr>
<tr class=3D"row-even"><td>in a string passed to the <code class=3D"docutil=
s literal"><span class=3D"pre">repl</span></code>
argument of <code class=3D"docutils literal"><span class=3D"pre">re.sub()</=
span></code></td>
<td><ul class=3D"first last simple">
<li><code class=3D"docutils literal"><span class=3D"pre">\g&lt;quote&gt;</s=
pan></code></li>
<li><code class=3D"docutils literal"><span class=3D"pre">\g&lt;1&gt;</span>=
</code></li>
<li><code class=3D"docutils literal"><span class=3D"pre">\1</span></code></=
li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?P=3Dname)</span>=
</code></dt>
<dd>A backreference to a named group; it matches whatever text was matched =
by the
earlier group named <em>name</em>.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?#...)</span></co=
de></dt>
<dd>A comment; the contents of the parentheses are simply ignored.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?=3D...)</span></=
code></dt>
<dd>Matches if <code class=3D"docutils literal"><span class=3D"pre">...</sp=
an></code> matches next, but doesn=E2=80=99t consume any of the string.  Th=
is is
called a lookahead assertion.  For example, <code class=3D"docutils literal=
"><span class=3D"pre">Isaac</span> <span class=3D"pre">(?=3DAsimov)</span><=
/code> will match
<code class=3D"docutils literal"><span class=3D"pre">'Isaac</span> <span cl=
ass=3D"pre">'</span></code> only if it=E2=80=99s followed by <code class=3D=
"docutils literal"><span class=3D"pre">'Asimov'</span></code>.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?!...)</span></co=
de></dt>
<dd>Matches if <code class=3D"docutils literal"><span class=3D"pre">...</sp=
an></code> doesn=E2=80=99t match next.  This is a negative lookahead assert=
ion.
For example, <code class=3D"docutils literal"><span class=3D"pre">Isaac</sp=
an> <span class=3D"pre">(?!Asimov)</span></code> will match <code class=3D"=
docutils literal"><span class=3D"pre">'Isaac</span> <span class=3D"pre">'</=
span></code> only if it=E2=80=99s <em>not</em>
followed by <code class=3D"docutils literal"><span class=3D"pre">'Asimov'</=
span></code>.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?&lt;=3D...)</spa=
n></code></dt>
<dd><p class=3D"first">Matches if the current position in the string is pre=
ceded by a match for <code class=3D"docutils literal"><span class=3D"pre">.=
..</span></code>
that ends at the current position.  This is called a <em class=3D"dfn">posi=
tive lookbehind
assertion</em>. <code class=3D"docutils literal"><span class=3D"pre">(?&lt;=
=3Dabc)def</span></code> will find a match in <code class=3D"docutils liter=
al"><span class=3D"pre">abcdef</span></code>, since the
lookbehind will back up 3 characters and check if the contained pattern mat=
ches.
The contained pattern must only match strings of some fixed length, meaning=
 that
<code class=3D"docutils literal"><span class=3D"pre">abc</span></code> or <=
code class=3D"docutils literal"><span class=3D"pre">a|b</span></code> are a=
llowed, but <code class=3D"docutils literal"><span class=3D"pre">a*</span><=
/code> and <code class=3D"docutils literal"><span class=3D"pre">a{3,4}</spa=
n></code> are not.  Note that
patterns which start with positive lookbehind assertions will not match at =
the
beginning of the string being searched; you will most likely want to use th=
e
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.search" title=3D"re.search"><code class=3D"xref py py-func docuti=
ls literal"><span class=3D"pre">search()</span></code></a> function rather =
than the <a class=3D"reference internal" href=3D"https://docs.python.org/3/=
library/re.html#re.match" title=3D"re.match"><code class=3D"xref py py-func=
 docutils literal"><span class=3D"pre">match()</span></code></a> function:<=
/p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"kn">import=
</span> <span class=3D"nn">re</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o">.</span><s=
pan class=3D"n">search</span><span class=3D"p">(</span><span class=3D"s1">'=
(?&lt;=3Dabc)def'</span><span class=3D"p">,</span> <span class=3D"s1">'abcd=
ef'</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"mi">0</span><span class=3D"p">)</span>
<span class=3D"go">'def'</span>
</pre></div>
</div>
<p>This example looks for a word following a hyphen:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span=
> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o"=
>.</span><span class=3D"n">search</span><span class=3D"p">(</span><span cla=
ss=3D"s1">'(?&lt;=3D-)\w+'</span><span class=3D"p">,</span> <span class=3D"=
s1">'spam-egg'</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"mi">0</span><span class=3D"p">)</span>
<span class=3D"go">'egg'</span>
</pre></div>
</div>
<div class=3D"last versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.5: </span>Added sup=
port for group references of fixed length.</p>
</div>
</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?&lt;!...)</span>=
</code></dt>
<dd>Matches if the current position in the string is not preceded by a matc=
h for
<code class=3D"docutils literal"><span class=3D"pre">...</span></code>.  Th=
is is called a <em class=3D"dfn">negative lookbehind assertion</em>.  Simil=
ar to
positive lookbehind assertions, the contained pattern must only match strin=
gs of
some fixed length.  Patterns which start with negative lookbehind assertion=
s may
match at the beginning of the string being searched.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">(?(id/name)yes-pat=
tern|no-pattern)</span></code></dt>
<dd>Will try to match with <code class=3D"docutils literal"><span class=3D"=
pre">yes-pattern</span></code> if the group with given <em>id</em> or
<em>name</em> exists, and with <code class=3D"docutils literal"><span class=
=3D"pre">no-pattern</span></code> if it doesn=E2=80=99t. <code class=3D"doc=
utils literal"><span class=3D"pre">no-pattern</span></code> is
optional and can be omitted. For example,
<code class=3D"docutils literal"><span class=3D"pre">(&lt;)?(\w+@\w+(?:\.\w=
+)+)(?(1)&gt;|$)</span></code> is a poor email matching pattern, which
will match with <code class=3D"docutils literal"><span class=3D"pre">'&lt;u=
ser@host.com&gt;'</span></code> as well as <code class=3D"docutils literal"=
><span class=3D"pre">'user@host.com'</span></code>, but
not with <code class=3D"docutils literal"><span class=3D"pre">'&lt;user@hos=
t.com'</span></code> nor <code class=3D"docutils literal"><span class=3D"pr=
e">'user@host.com&gt;'</span></code>.</dd>
</dl>
<p>The special sequences consist of <code class=3D"docutils literal"><span =
class=3D"pre">'\'</span></code> and a character from the list below.
If the ordinary character is not an ASCII digit or an ASCII letter, then th=
e
resulting RE will match the second character.  For example, <code class=3D"=
docutils literal"><span class=3D"pre">\$</span></code> matches the
character <code class=3D"docutils literal"><span class=3D"pre">'$'</span></=
code>.</p>
<dl class=3D"docutils">
<dt><code class=3D"docutils literal"><span class=3D"pre">\number</span></co=
de></dt>
<dd>Matches the contents of the group of the same number.  Groups are numbe=
red
starting from 1.  For example, <code class=3D"docutils literal"><span class=
=3D"pre">(.+)</span> <span class=3D"pre">\1</span></code> matches <code cla=
ss=3D"docutils literal"><span class=3D"pre">'the</span> <span class=3D"pre"=
>the'</span></code> or <code class=3D"docutils literal"><span class=3D"pre"=
>'55</span> <span class=3D"pre">55'</span></code>,
but not <code class=3D"docutils literal"><span class=3D"pre">'thethe'</span=
></code> (note the space after the group).  This special sequence
can only be used to match one of the first 99 groups.  If the first digit o=
f
<em>number</em> is 0, or <em>number</em> is 3 octal digits long, it will no=
t be interpreted as
a group match, but as the character with octal value <em>number</em>. Insid=
e the
<code class=3D"docutils literal"><span class=3D"pre">'['</span></code> and =
<code class=3D"docutils literal"><span class=3D"pre">']'</span></code> of a=
 character class, all numeric escapes are treated as
characters.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\A</span></code></=
dt>
<dd>Matches only at the start of the string.</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\b</span></code></=
dt>
<dd><p class=3D"first">Matches the empty string, but only at the beginning =
or end of a word.
A word is defined as a sequence of Unicode alphanumeric or underscore
characters, so the end of a word is indicated by whitespace or a
non-alphanumeric, non-underscore Unicode character.  Note that formally,
<code class=3D"docutils literal"><span class=3D"pre">\b</span></code> is de=
fined as the boundary between a <code class=3D"docutils literal"><span clas=
s=3D"pre">\w</span></code> and a <code class=3D"docutils literal"><span cla=
ss=3D"pre">\W</span></code> character
(or vice versa), or between <code class=3D"docutils literal"><span class=3D=
"pre">\w</span></code> and the beginning/end of the string.
This means that <code class=3D"docutils literal"><span class=3D"pre">r'\bfo=
o\b'</span></code> matches <code class=3D"docutils literal"><span class=3D"=
pre">'foo'</span></code>, <code class=3D"docutils literal"><span class=3D"p=
re">'foo.'</span></code>, <code class=3D"docutils literal"><span class=3D"p=
re">'(foo)'</span></code>,
<code class=3D"docutils literal"><span class=3D"pre">'bar</span> <span clas=
s=3D"pre">foo</span> <span class=3D"pre">baz'</span></code> but not <code c=
lass=3D"docutils literal"><span class=3D"pre">'foobar'</span></code> or <co=
de class=3D"docutils literal"><span class=3D"pre">'foo3'</span></code>.</p>
<p class=3D"last">By default Unicode alphanumerics are the ones used, but t=
his can  be changed
by using the <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/re.html#re.ASCII" title=3D"re.ASCII"><code class=3D"xref py py-=
const docutils literal"><span class=3D"pre">ASCII</span></code></a> flag.  =
Inside a character range, <code class=3D"docutils literal"><span class=3D"p=
re">\b</span></code>
represents the backspace character, for compatibility with Python=E2=80=99s=
 string
literals.</p>
</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\B</span></code></=
dt>
<dd>Matches the empty string, but only when it is <em>not</em> at the begin=
ning or end
of a word.  This means that <code class=3D"docutils literal"><span class=3D=
"pre">r'py\B'</span></code> matches <code class=3D"docutils literal"><span =
class=3D"pre">'python'</span></code>, <code class=3D"docutils literal"><spa=
n class=3D"pre">'py3'</span></code>,
<code class=3D"docutils literal"><span class=3D"pre">'py2'</span></code>, b=
ut not <code class=3D"docutils literal"><span class=3D"pre">'py'</span></co=
de>, <code class=3D"docutils literal"><span class=3D"pre">'py.'</span></cod=
e>, or <code class=3D"docutils literal"><span class=3D"pre">'py!'</span></c=
ode>.
<code class=3D"docutils literal"><span class=3D"pre">\B</span></code> is ju=
st the opposite of <code class=3D"docutils literal"><span class=3D"pre">\b<=
/span></code>, so word characters are
Unicode alphanumerics or the underscore, although this can be changed
by using the <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/re.html#re.ASCII" title=3D"re.ASCII"><code class=3D"xref py py-=
const docutils literal"><span class=3D"pre">ASCII</span></code></a> flag.</=
dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\d</span></code></=
dt>
<dd><dl class=3D"first last docutils">
<dt>For Unicode (str) patterns:</dt>
<dd>Matches any Unicode decimal digit (that is, any character in
Unicode character category [Nd]).  This includes <code class=3D"docutils li=
teral"><span class=3D"pre">[0-9]</span></code>, and
also many other digit characters.  If the <a class=3D"reference internal" h=
ref=3D"https://docs.python.org/3/library/re.html#re.ASCII" title=3D"re.ASCI=
I"><code class=3D"xref py py-const docutils literal"><span class=3D"pre">AS=
CII</span></code></a> flag is
used only <code class=3D"docutils literal"><span class=3D"pre">[0-9]</span>=
</code> is matched (but the flag affects the entire
regular expression, so in such cases using an explicit <code class=3D"docut=
ils literal"><span class=3D"pre">[0-9]</span></code>
may be a better choice).</dd>
<dt>For 8-bit (bytes) patterns:</dt>
<dd>Matches any decimal digit; this is equivalent to <code class=3D"docutil=
s literal"><span class=3D"pre">[0-9]</span></code>.</dd>
</dl>
</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\D</span></code></=
dt>
<dd>Matches any character which is not a Unicode decimal digit. This is
the opposite of <code class=3D"docutils literal"><span class=3D"pre">\d</sp=
an></code>. If the <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/re.html#re.ASCII" title=3D"re.ASCII"><code class=3D"xref =
py py-const docutils literal"><span class=3D"pre">ASCII</span></code></a> f=
lag is used this
becomes the equivalent of <code class=3D"docutils literal"><span class=3D"p=
re">[^0-9]</span></code> (but the flag affects the entire
regular expression, so in such cases using an explicit <code class=3D"docut=
ils literal"><span class=3D"pre">[^0-9]</span></code> may
be a better choice).</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\s</span></code></=
dt>
<dd><dl class=3D"first last docutils">
<dt>For Unicode (str) patterns:</dt>
<dd>Matches Unicode whitespace characters (which includes
<code class=3D"docutils literal"><span class=3D"pre">[</span> <span class=
=3D"pre">\t\n\r\f\v]</span></code>, and also many other characters, for exa=
mple the
non-breaking spaces mandated by typography rules in many
languages). If the <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/re.html#re.ASCII" title=3D"re.ASCII"><code class=3D"xref =
py py-const docutils literal"><span class=3D"pre">ASCII</span></code></a> f=
lag is used, only
<code class=3D"docutils literal"><span class=3D"pre">[</span> <span class=
=3D"pre">\t\n\r\f\v]</span></code> is matched (but the flag affects the ent=
ire
regular expression, so in such cases using an explicit
<code class=3D"docutils literal"><span class=3D"pre">[</span> <span class=
=3D"pre">\t\n\r\f\v]</span></code> may be a better choice).</dd>
<dt>For 8-bit (bytes) patterns:</dt>
<dd>Matches characters considered whitespace in the ASCII character set;
this is equivalent to <code class=3D"docutils literal"><span class=3D"pre">=
[</span> <span class=3D"pre">\t\n\r\f\v]</span></code>.</dd>
</dl>
</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\S</span></code></=
dt>
<dd>Matches any character which is not a Unicode whitespace character. This=
 is
the opposite of <code class=3D"docutils literal"><span class=3D"pre">\s</sp=
an></code>. If the <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/re.html#re.ASCII" title=3D"re.ASCII"><code class=3D"xref =
py py-const docutils literal"><span class=3D"pre">ASCII</span></code></a> f=
lag is used this
becomes the equivalent of <code class=3D"docutils literal"><span class=3D"p=
re">[^</span> <span class=3D"pre">\t\n\r\f\v]</span></code> (but the flag a=
ffects the entire
regular expression, so in such cases using an explicit <code class=3D"docut=
ils literal"><span class=3D"pre">[^</span> <span class=3D"pre">\t\n\r\f\v]<=
/span></code> may
be a better choice).</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\w</span></code></=
dt>
<dd><dl class=3D"first last docutils">
<dt>For Unicode (str) patterns:</dt>
<dd>Matches Unicode word characters; this includes most characters
that can be part of a word in any language, as well as numbers and
the underscore. If the <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/library/re.html#re.ASCII" title=3D"re.ASCII"><code class=3D"x=
ref py py-const docutils literal"><span class=3D"pre">ASCII</span></code></=
a> flag is used, only
<code class=3D"docutils literal"><span class=3D"pre">[a-zA-Z0-9_]</span></c=
ode> is matched (but the flag affects the entire
regular expression, so in such cases using an explicit
<code class=3D"docutils literal"><span class=3D"pre">[a-zA-Z0-9_]</span></c=
ode> may be a better choice).</dd>
<dt>For 8-bit (bytes) patterns:</dt>
<dd>Matches characters considered alphanumeric in the ASCII character set;
this is equivalent to <code class=3D"docutils literal"><span class=3D"pre">=
[a-zA-Z0-9_]</span></code>.</dd>
</dl>
</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\W</span></code></=
dt>
<dd>Matches any character which is not a Unicode word character. This is
the opposite of <code class=3D"docutils literal"><span class=3D"pre">\w</sp=
an></code>. If the <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/re.html#re.ASCII" title=3D"re.ASCII"><code class=3D"xref =
py py-const docutils literal"><span class=3D"pre">ASCII</span></code></a> f=
lag is used this
becomes the equivalent of <code class=3D"docutils literal"><span class=3D"p=
re">[^a-zA-Z0-9_]</span></code> (but the flag affects the
entire regular expression, so in such cases using an explicit
<code class=3D"docutils literal"><span class=3D"pre">[^a-zA-Z0-9_]</span></=
code> may be a better choice).</dd>
<dt><code class=3D"docutils literal"><span class=3D"pre">\Z</span></code></=
dt>
<dd>Matches only at the end of the string.</dd>
</dl>
<p>Most of the standard escapes supported by Python string literals are als=
o
accepted by the regular expression parser:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span>\<span class=3D"n">a</span>      \<span cl=
ass=3D"n">b</span>      \<span class=3D"n">f</span>      \<span class=3D"n"=
>n</span>
\<span class=3D"n">r</span>      \<span class=3D"n">t</span>      \<span cl=
ass=3D"n">u</span>      \<span class=3D"n">U</span>
\<span class=3D"n">v</span>      \<span class=3D"n">x</span>      \\
</pre></div>
</div>
<p>(Note that <code class=3D"docutils literal"><span class=3D"pre">\b</span=
></code> is used to represent word boundaries, and means =E2=80=9Cbackspace=
=E2=80=9D
only inside character classes.)</p>
<p><code class=3D"docutils literal"><span class=3D"pre">'\u'</span></code> =
and <code class=3D"docutils literal"><span class=3D"pre">'\U'</span></code>=
 escape sequences are only recognized in Unicode
patterns.  In bytes patterns they are not treated specially.</p>
<p>Octal escapes are included in a limited form.  If the first digit is a 0=
, or if
there are three octal digits, it is considered an octal escape. Otherwise, =
it is
a group reference.  As for string literals, octal escapes are always at mos=
t
three digits in length.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.3: </span>The <code=
 class=3D"docutils literal"><span class=3D"pre">'\u'</span></code> and <cod=
e class=3D"docutils literal"><span class=3D"pre">'\U'</span></code> escape =
sequences have been added.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.6: </span>Unknown e=
scapes consisting of <code class=3D"docutils literal"><span class=3D"pre">'=
\'</span></code> and an ASCII letter now are errors.</p>
</div>
<div class=3D"admonition seealso">
<p class=3D"first admonition-title">See also</p>
<dl class=3D"last docutils">
<dt>Mastering Regular Expressions</dt>
<dd>Book on regular expressions by Jeffrey Friedl, published by O=E2=80=99R=
eilly.  The
second edition of the book no longer covers Python at all, but the first
edition covered writing good regular expression patterns in great detail.</=
dd>
</dl>
</div>
</div>
<div class=3D"section" id=3D"module-contents">
<span id=3D"contents-of-module-re"></span><h2>6.2.2. Module Contents<a clas=
s=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#module-c=
ontents" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>The module defines several functions, constants, and an exception. Some =
of the
functions are simplified versions of the full featured methods for compiled
regular expressions.  Most non-trivial applications always use the compiled
form.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.6: </span>Flag cons=
tants are now instances of <code class=3D"xref py py-class docutils literal=
"><span class=3D"pre">RegexFlag</span></code>, which is a subclass of
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
num.html#enum.IntFlag" title=3D"enum.IntFlag"><code class=3D"xref py py-cla=
ss docutils literal"><span class=3D"pre">enum.IntFlag</span></code></a>.</p=
>
</div>
<dl class=3D"function">
<dt id=3D"re.compile">
<code class=3D"descclassname">re.</code><code class=3D"descname">compile</c=
ode><span class=3D"sig-paren">(</span><em>pattern</em>, <em>flags=3D0</em><=
span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://do=
cs.python.org/3/library/re.html#re.compile" title=3D"Permalink to this defi=
nition">=C2=B6</a></dt>
<dd><p>Compile a regular expression pattern into a regular expression objec=
t, which
can be used for matching using its <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/library/re.html#re.regex.match" title=3D"re.regex=
.match"><code class=3D"xref py py-func docutils literal"><span class=3D"pre=
">match()</span></code></a> and
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.regex.search" title=3D"re.regex.search"><code class=3D"xref py py=
-func docutils literal"><span class=3D"pre">search()</span></code></a> meth=
ods, described below.</p>
<p>The expression=E2=80=99s behaviour can be modified by specifying a <em>f=
lags</em> value.
Values can be any of the following variables, combined using bitwise OR (th=
e
<code class=3D"docutils literal"><span class=3D"pre">|</span></code> operat=
or).</p>
<p>The sequence</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"n">prog</span> <span class=
=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o">.</span><spa=
n class=3D"n">compile</span><span class=3D"p">(</span><span class=3D"n">pat=
tern</span><span class=3D"p">)</span>
<span class=3D"n">result</span> <span class=3D"o">=3D</span> <span class=3D=
"n">prog</span><span class=3D"o">.</span><span class=3D"n">match</span><spa=
n class=3D"p">(</span><span class=3D"n">string</span><span class=3D"p">)</s=
pan>
</pre></div>
</div>
<p>is equivalent to</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"n">result</span> <span clas=
s=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o">.</span><sp=
an class=3D"n">match</span><span class=3D"p">(</span><span class=3D"n">patt=
ern</span><span class=3D"p">,</span> <span class=3D"n">string</span><span c=
lass=3D"p">)</span>
</pre></div>
</div>
<p>but using <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/re.html#re.compile" title=3D"re.compile"><code class=3D"xref py=
 py-func docutils literal"><span class=3D"pre">re.compile()</span></code></=
a> and saving the resulting regular expression
object for reuse is more efficient when the expression will be used several
times in a single program.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The compiled versions of the most recent patterns passed =
to
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.compile" title=3D"re.compile"><code class=3D"xref py py-func docu=
tils literal"><span class=3D"pre">re.compile()</span></code></a> and the mo=
dule-level matching functions are cached, so
programs that use only a few regular expressions at a time needn=E2=80=99t =
worry
about compiling regular expressions.</p>
</div>
</dd></dl>

<dl class=3D"data">
<dt id=3D"re.A">
<code class=3D"descclassname">re.</code><code class=3D"descname">A</code><a=
 class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#re.=
A" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt id=3D"re.ASCII">
<code class=3D"descclassname">re.</code><code class=3D"descname">ASCII</cod=
e><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html=
#re.ASCII" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Make <code class=3D"docutils literal"><span class=3D"pre">\w</span><=
/code>, <code class=3D"docutils literal"><span class=3D"pre">\W</span></cod=
e>, <code class=3D"docutils literal"><span class=3D"pre">\b</span></code>, =
<code class=3D"docutils literal"><span class=3D"pre">\B</span></code>, <cod=
e class=3D"docutils literal"><span class=3D"pre">\d</span></code>, <code cl=
ass=3D"docutils literal"><span class=3D"pre">\D</span></code>, <code class=
=3D"docutils literal"><span class=3D"pre">\s</span></code> and <code class=
=3D"docutils literal"><span class=3D"pre">\S</span></code>
perform ASCII-only matching instead of full Unicode matching.  This is only
meaningful for Unicode patterns, and is ignored for byte patterns.</p>
<p>Note that for backward compatibility, the <code class=3D"xref py py-cons=
t docutils literal"><span class=3D"pre">re.U</span></code> flag still
exists (as well as its synonym <code class=3D"xref py py-const docutils lit=
eral"><span class=3D"pre">re.UNICODE</span></code> and its embedded
counterpart <code class=3D"docutils literal"><span class=3D"pre">(?u)</span=
></code>), but these are redundant in Python 3 since
matches are Unicode by default for strings (and Unicode matching
isn=E2=80=99t allowed for bytes).</p>
</dd></dl>

<dl class=3D"data">
<dt id=3D"re.DEBUG">
<code class=3D"descclassname">re.</code><code class=3D"descname">DEBUG</cod=
e><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html=
#re.DEBUG" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Display debug information about compiled expression.</p>
</dd></dl>

<dl class=3D"data">
<dt id=3D"re.I">
<code class=3D"descclassname">re.</code><code class=3D"descname">I</code><a=
 class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#re.=
I" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt id=3D"re.IGNORECASE">
<code class=3D"descclassname">re.</code><code class=3D"descname">IGNORECASE=
</code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re=
.html#re.IGNORECASE" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Perform case-insensitive matching; expressions like <code class=3D"d=
ocutils literal"><span class=3D"pre">[A-Z]</span></code> will match
lowercase letters, too.  This is not affected by the current locale
and works for Unicode characters as expected.</p>
</dd></dl>

<dl class=3D"data">
<dt id=3D"re.L">
<code class=3D"descclassname">re.</code><code class=3D"descname">L</code><a=
 class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#re.=
L" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt id=3D"re.LOCALE">
<code class=3D"descclassname">re.</code><code class=3D"descname">LOCALE</co=
de><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.htm=
l#re.LOCALE" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Make <code class=3D"docutils literal"><span class=3D"pre">\w</span><=
/code>, <code class=3D"docutils literal"><span class=3D"pre">\W</span></cod=
e>, <code class=3D"docutils literal"><span class=3D"pre">\b</span></code>, =
<code class=3D"docutils literal"><span class=3D"pre">\B</span></code>, <cod=
e class=3D"docutils literal"><span class=3D"pre">\s</span></code> and <code=
 class=3D"docutils literal"><span class=3D"pre">\S</span></code> dependent =
on the
current locale. The use of this flag is discouraged as the locale mechanism
is very unreliable, and it only handles one =E2=80=9Cculture=E2=80=9D at a =
time anyway;
you should use Unicode matching instead, which is the default in Python 3
for Unicode (str) patterns. This flag can be used only with bytes patterns.=
</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.6: </span><a class=
=3D"reference internal" href=3D"https://docs.python.org/3/library/re.html#r=
e.LOCALE" title=3D"re.LOCALE"><code class=3D"xref py py-const docutils lite=
ral"><span class=3D"pre">re.LOCALE</span></code></a> can be used only with =
bytes patterns and is
not compatible with <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/re.html#re.ASCII" title=3D"re.ASCII"><code class=3D"xref=
 py py-const docutils literal"><span class=3D"pre">re.ASCII</span></code></=
a>.</p>
</div>
</dd></dl>

<dl class=3D"data">
<dt id=3D"re.M">
<code class=3D"descclassname">re.</code><code class=3D"descname">M</code><a=
 class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#re.=
M" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt id=3D"re.MULTILINE">
<code class=3D"descclassname">re.</code><code class=3D"descname">MULTILINE<=
/code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.=
html#re.MULTILINE" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>When specified, the pattern character <code class=3D"docutils litera=
l"><span class=3D"pre">'^'</span></code> matches at the beginning of the
string and at the beginning of each line (immediately following each newlin=
e);
and the pattern character <code class=3D"docutils literal"><span class=3D"p=
re">'$'</span></code> matches at the end of the string and at the
end of each line (immediately preceding each newline).  By default, <code c=
lass=3D"docutils literal"><span class=3D"pre">'^'</span></code>
matches only at the beginning of the string, and <code class=3D"docutils li=
teral"><span class=3D"pre">'$'</span></code> only at the end of the
string and immediately before the newline (if any) at the end of the string=
.</p>
</dd></dl>

<dl class=3D"data">
<dt id=3D"re.S">
<code class=3D"descclassname">re.</code><code class=3D"descname">S</code><a=
 class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#re.=
S" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt id=3D"re.DOTALL">
<code class=3D"descclassname">re.</code><code class=3D"descname">DOTALL</co=
de><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.htm=
l#re.DOTALL" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Make the <code class=3D"docutils literal"><span class=3D"pre">'.'</s=
pan></code> special character match any character at all, including a
newline; without this flag, <code class=3D"docutils literal"><span class=3D=
"pre">'.'</span></code> will match anything <em>except</em> a newline.</p>
</dd></dl>

<dl class=3D"data">
<dt id=3D"re.X">
<code class=3D"descclassname">re.</code><code class=3D"descname">X</code><a=
 class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#re.=
X" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt id=3D"re.VERBOSE">
<code class=3D"descclassname">re.</code><code class=3D"descname">VERBOSE</c=
ode><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.ht=
ml#re.VERBOSE" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This flag allows you to write regular expressions that look nicer an=
d are
more readable by allowing you to visually separate logical sections of the
pattern and add comments. Whitespace within the pattern is ignored, except
when in a character class or when preceded by an unescaped backslash.
When a line contains a <code class=3D"docutils literal"><span class=3D"pre"=
>#</span></code> that is not in a character class and is not
preceded by an unescaped backslash, all characters from the leftmost such
<code class=3D"docutils literal"><span class=3D"pre">#</span></code> throug=
h the end of the line are ignored.</p>
<p>This means that the two following regular expression objects that match =
a
decimal number are functionally equal:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"n">a</span> <span class=3D"=
o">=3D</span> <span class=3D"n">re</span><span class=3D"o">.</span><span cl=
ass=3D"n">compile</span><span class=3D"p">(</span><span class=3D"s2">r"""\d=
 +  # the integral part</span>
<span class=3D"s2">                   \.    # the decimal point</span>
<span class=3D"s2">                   \d *  # some fractional digits"""</sp=
an><span class=3D"p">,</span> <span class=3D"n">re</span><span class=3D"o">=
.</span><span class=3D"n">X</span><span class=3D"p">)</span>
<span class=3D"n">b</span> <span class=3D"o">=3D</span> <span class=3D"n">r=
e</span><span class=3D"o">.</span><span class=3D"n">compile</span><span cla=
ss=3D"p">(</span><span class=3D"s2">r"\d+\.\d*"</span><span class=3D"p">)</=
span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.search">
<code class=3D"descclassname">re.</code><code class=3D"descname">search</co=
de><span class=3D"sig-paren">(</span><em>pattern</em>, <em>string</em>, <em=
>flags=3D0</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" hr=
ef=3D"https://docs.python.org/3/library/re.html#re.search" title=3D"Permali=
nk to this definition">=C2=B6</a></dt>
<dd><p>Scan through <em>string</em> looking for the first location where th=
e regular expression
<em>pattern</em> produces a match, and return a corresponding <a class=3D"r=
eference internal" href=3D"https://docs.python.org/3/library/re.html#match-=
objects"><span>match object</span></a>.  Return <code class=3D"docutils lit=
eral"><span class=3D"pre">None</span></code> if no position in the string m=
atches the
pattern; note that this is different from finding a zero-length match at so=
me
point in the string.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.match">
<code class=3D"descclassname">re.</code><code class=3D"descname">match</cod=
e><span class=3D"sig-paren">(</span><em>pattern</em>, <em>string</em>, <em>=
flags=3D0</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" hre=
f=3D"https://docs.python.org/3/library/re.html#re.match" title=3D"Permalink=
 to this definition">=C2=B6</a></dt>
<dd><p>If zero or more characters at the beginning of <em>string</em> match=
 the regular
expression <em>pattern</em>, return a corresponding <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/library/re.html#match-objects"><=
span>match object</span></a>.  Return <code class=3D"docutils literal"><spa=
n class=3D"pre">None</span></code> if the string does not match the pattern=
;
note that this is different from a zero-length match.</p>
<p>Note that even in <a class=3D"reference internal" href=3D"https://docs.p=
ython.org/3/library/re.html#re.MULTILINE" title=3D"re.MULTILINE"><code clas=
s=3D"xref py py-const docutils literal"><span class=3D"pre">MULTILINE</span=
></code></a> mode, <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/re.html#re.match" title=3D"re.match"><code class=3D"xref =
py py-func docutils literal"><span class=3D"pre">re.match()</span></code></=
a> will only match
at the beginning of the string and not at the beginning of each line.</p>
<p>If you want to locate a match anywhere in <em>string</em>, use <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/library/re.html#r=
e.search" title=3D"re.search"><code class=3D"xref py py-func docutils liter=
al"><span class=3D"pre">search()</span></code></a>
instead (see also <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/re.html#search-vs-match"><span>search() vs. match()</span>=
</a>).</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.fullmatch">
<code class=3D"descclassname">re.</code><code class=3D"descname">fullmatch<=
/code><span class=3D"sig-paren">(</span><em>pattern</em>, <em>string</em>, =
<em>flags=3D0</em><span class=3D"sig-paren">)</span><a class=3D"headerlink"=
 href=3D"https://docs.python.org/3/library/re.html#re.fullmatch" title=3D"P=
ermalink to this definition">=C2=B6</a></dt>
<dd><p>If the whole <em>string</em> matches the regular expression <em>patt=
ern</em>, return a
corresponding <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/re.html#match-objects"><span>match object</span></a>.  Return =
<code class=3D"docutils literal"><span class=3D"pre">None</span></code> if =
the
string does not match the pattern; note that this is different from a
zero-length match.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.4.</span></p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.split">
<code class=3D"descclassname">re.</code><code class=3D"descname">split</cod=
e><span class=3D"sig-paren">(</span><em>pattern</em>, <em>string</em>, <em>=
maxsplit=3D0</em>, <em>flags=3D0</em><span class=3D"sig-paren">)</span><a c=
lass=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#re.sp=
lit" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Split <em>string</em> by the occurrences of <em>pattern</em>.  If ca=
pturing parentheses are
used in <em>pattern</em>, then the text of all groups in the pattern are al=
so returned
as part of the resulting list. If <em>maxsplit</em> is nonzero, at most <em=
>maxsplit</em>
splits occur, and the remainder of the string is returned as the final elem=
ent
of the list.</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</spa=
n><span class=3D"o">.</span><span class=3D"n">split</span><span class=3D"p"=
>(</span><span class=3D"s1">'\W+'</span><span class=3D"p">,</span> <span cl=
ass=3D"s1">'Words, words, words.'</span><span class=3D"p">)</span>
<span class=3D"go">['Words', 'words', 'words', '']</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">split</span><span class=3D"p">(</span><s=
pan class=3D"s1">'(\W+)'</span><span class=3D"p">,</span> <span class=3D"s1=
">'Words, words, words.'</span><span class=3D"p">)</span>
<span class=3D"go">['Words', ', ', 'words', ', ', 'words', '.', '']</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">split</span><span class=3D"p">(</span><s=
pan class=3D"s1">'\W+'</span><span class=3D"p">,</span> <span class=3D"s1">=
'Words, words, words.'</span><span class=3D"p">,</span> <span class=3D"mi">=
1</span><span class=3D"p">)</span>
<span class=3D"go">['Words', 'words, words.']</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">split</span><span class=3D"p">(</span><s=
pan class=3D"s1">'[a-f]+'</span><span class=3D"p">,</span> <span class=3D"s=
1">'0a3B9'</span><span class=3D"p">,</span> <span class=3D"n">flags</span><=
span class=3D"o">=3D</span><span class=3D"n">re</span><span class=3D"o">.</=
span><span class=3D"n">IGNORECASE</span><span class=3D"p">)</span>
<span class=3D"go">['0', '3', '9']</span>
</pre></div>
</div>
<p>If there are capturing groups in the separator and it matches at the sta=
rt of
the string, the result will start with an empty string.  The same holds for
the end of the string:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</spa=
n><span class=3D"o">.</span><span class=3D"n">split</span><span class=3D"p"=
>(</span><span class=3D"s1">'(\W+)'</span><span class=3D"p">,</span> <span =
class=3D"s1">'...words, words...'</span><span class=3D"p">)</span>
<span class=3D"go">['', '...', 'words', ', ', 'words', '...', '']</span>
</pre></div>
</div>
<p>That way, separator components are always found at the same relative
indices within the result list.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/re.html#re.split" title=3D"re.split"><code class=3D"xref py py-func docut=
ils literal"><span class=3D"pre">split()</span></code></a> doesn=E2=80=99t =
currently split a string on an empty pattern match.
For example:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</spa=
n><span class=3D"o">.</span><span class=3D"n">split</span><span class=3D"p"=
>(</span><span class=3D"s1">'x*'</span><span class=3D"p">,</span> <span cla=
ss=3D"s1">'axbc'</span><span class=3D"p">)</span>
<span class=3D"go">['a', 'bc']</span>
</pre></div>
</div>
<p>Even though <code class=3D"docutils literal"><span class=3D"pre">'x*'</s=
pan></code> also matches 0 =E2=80=98x=E2=80=99 before =E2=80=98a=E2=80=99, =
between =E2=80=98b=E2=80=99 and =E2=80=98c=E2=80=99,
and after =E2=80=98c=E2=80=99, currently these matches are ignored.  The co=
rrect behavior
(i.e. splitting on empty matches too and returning <code class=3D"docutils =
literal"><span class=3D"pre">['',</span> <span class=3D"pre">'a',</span> <s=
pan class=3D"pre">'b',</span> <span class=3D"pre">'c',</span>
<span class=3D"pre">'']</span></code>) will be implemented in future versio=
ns of Python, but since this
is a backward incompatible change, a <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/exceptions.html#FutureWarning" title=
=3D"FutureWarning"><code class=3D"xref py py-exc docutils literal"><span cl=
ass=3D"pre">FutureWarning</span></code></a> will be raised
in the meanwhile.</p>
<p>Patterns that can only match empty strings currently never split the
string.  Since this doesn=E2=80=99t match the expected behavior, a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#ValueError" title=3D"ValueError"><code class=3D"xref py py-e=
xc docutils literal"><span class=3D"pre">ValueError</span></code></a> will =
be raised starting from Python 3.5:</p>
<div class=3D"last highlight-python3" style=3D"position: relative;"><div cl=
ass=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and =
output" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px;=
 border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; =
color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; pad=
ding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre=
><span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</=
span><span class=3D"o">.</span><span class=3D"n">split</span><span class=3D=
"p">(</span><span class=3D"s2">"^$"</span><span class=3D"p">,</span> <span =
class=3D"s2">"foo</span><span class=3D"se">\n\n</span><span class=3D"s2">ba=
r</span><span class=3D"se">\n</span><span class=3D"s2">"</span><span class=
=3D"p">,</span> <span class=3D"n">flags</span><span class=3D"o">=3D</span><=
span class=3D"n">re</span><span class=3D"o">.</span><span class=3D"n">M</sp=
an><span class=3D"p">)</span>
<span class=3D"gt">Traceback (most recent call last):</span><span>
  File </span><span class=3D"nb">"&lt;stdin&gt;"</span><span>, line </span>=
<span class=3D"m">1</span><span>, in </span><span class=3D"n">&lt;module&gt=
;</span>
  <span class=3D"c">...</span>
<span class=3D"gr">ValueError</span><span>: </span><span class=3D"n">split(=
) requires a non-empty pattern match.</span>
</pre></div>
</div>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.1: </span>Added the=
 optional flags argument.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.5: </span>Splitting=
 on a pattern that could match an empty string now raises
a warning.  Patterns that can only match empty strings are now rejected.</p=
>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.findall">
<code class=3D"descclassname">re.</code><code class=3D"descname">findall</c=
ode><span class=3D"sig-paren">(</span><em>pattern</em>, <em>string</em>, <e=
m>flags=3D0</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" h=
ref=3D"https://docs.python.org/3/library/re.html#re.findall" title=3D"Perma=
link to this definition">=C2=B6</a></dt>
<dd><p>Return all non-overlapping matches of <em>pattern</em> in <em>string=
</em>, as a list of
strings.  The <em>string</em> is scanned left-to-right, and matches are ret=
urned in
the order found.  If one or more groups are present in the pattern, return =
a
list of groups; this will be a list of tuples if the pattern has more than
one group.  Empty matches are included in the result unless they touch the
beginning of another match.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.finditer">
<code class=3D"descclassname">re.</code><code class=3D"descname">finditer</=
code><span class=3D"sig-paren">(</span><em>pattern</em>, <em>string</em>, <=
em>flags=3D0</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" =
href=3D"https://docs.python.org/3/library/re.html#re.finditer" title=3D"Per=
malink to this definition">=C2=B6</a></dt>
<dd><p>Return an <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/glossary.html#term-iterator"><span class=3D"xref std std-term">iter=
ator</span></a> yielding <a class=3D"reference internal" href=3D"https://do=
cs.python.org/3/library/re.html#match-objects"><span>match objects</span></=
a> over
all non-overlapping matches for the RE <em>pattern</em> in <em>string</em>.=
  The <em>string</em>
is scanned left-to-right, and matches are returned in the order found.  Emp=
ty
matches are included in the result unless they touch the beginning of anoth=
er
match.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.sub">
<code class=3D"descclassname">re.</code><code class=3D"descname">sub</code>=
<span class=3D"sig-paren">(</span><em>pattern</em>, <em>repl</em>, <em>stri=
ng</em>, <em>count=3D0</em>, <em>flags=3D0</em><span class=3D"sig-paren">)<=
/span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.=
html#re.sub" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return the string obtained by replacing the leftmost non-overlapping=
 occurrences
of <em>pattern</em> in <em>string</em> by the replacement <em>repl</em>.  I=
f the pattern isn=E2=80=99t found,
<em>string</em> is returned unchanged.  <em>repl</em> can be a string or a =
function; if it is
a string, any backslash escapes in it are processed.  That is, <code class=
=3D"docutils literal"><span class=3D"pre">\n</span></code> is
converted to a single newline character, <code class=3D"docutils literal"><=
span class=3D"pre">\r</span></code> is converted to a carriage return, and
so forth.  Unknown escapes such as <code class=3D"docutils literal"><span c=
lass=3D"pre">\&amp;</span></code> are left alone.  Backreferences, such
as <code class=3D"docutils literal"><span class=3D"pre">\6</span></code>, a=
re replaced with the substring matched by group 6 in the pattern.
For example:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</spa=
n><span class=3D"o">.</span><span class=3D"n">sub</span><span class=3D"p">(=
</span><span class=3D"s1">r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):'</spa=
n><span class=3D"p">,</span>
<span class=3D"gp">... </span>       <span class=3D"s1">r'static PyObject*\=
npy_\1(void)\n{'</span><span class=3D"p">,</span>
<span class=3D"gp">... </span>       <span class=3D"s1">'def myfunc():'</sp=
an><span class=3D"p">)</span>
<span class=3D"go">'static PyObject*\npy_myfunc(void)\n{'</span>
</pre></div>
</div>
<p>If <em>repl</em> is a function, it is called for every non-overlapping o=
ccurrence of
<em>pattern</em>.  The function takes a single match object argument, and r=
eturns the
replacement string.  For example:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">def</sp=
an> <span class=3D"nf">dashrepl</span><span class=3D"p">(</span><span class=
=3D"n">matchobj</span><span class=3D"p">):</span>
<span class=3D"gp">... </span>    <span class=3D"k">if</span> <span class=
=3D"n">matchobj</span><span class=3D"o">.</span><span class=3D"n">group</sp=
an><span class=3D"p">(</span><span class=3D"mi">0</span><span class=3D"p">)=
</span> <span class=3D"o">=3D=3D</span> <span class=3D"s1">'-'</span><span =
class=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"s1">' '=
</span>
<span class=3D"gp">... </span>    <span class=3D"k">else</span><span class=
=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"s1">'-'</spa=
n>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">sub</span><span class=3D"p">(</span><spa=
n class=3D"s1">'-{1,2}'</span><span class=3D"p">,</span> <span class=3D"n">=
dashrepl</span><span class=3D"p">,</span> <span class=3D"s1">'pro----gram-f=
iles'</span><span class=3D"p">)</span>
<span class=3D"go">'pro--gram files'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">sub</span><span class=3D"p">(</span><spa=
n class=3D"s1">r'\sAND\s'</span><span class=3D"p">,</span> <span class=3D"s=
1">' &amp; '</span><span class=3D"p">,</span> <span class=3D"s1">'Baked Bea=
ns And Spam'</span><span class=3D"p">,</span> <span class=3D"n">flags</span=
><span class=3D"o">=3D</span><span class=3D"n">re</span><span class=3D"o">.=
</span><span class=3D"n">IGNORECASE</span><span class=3D"p">)</span>
<span class=3D"go">'Baked Beans &amp; Spam'</span>
</pre></div>
</div>
<p>The pattern may be a string or an RE object.</p>
<p>The optional argument <em>count</em> is the maximum number of pattern oc=
currences to be
replaced; <em>count</em> must be a non-negative integer.  If omitted or zer=
o, all
occurrences will be replaced. Empty matches for the pattern are replaced on=
ly
when not adjacent to a previous match, so <code class=3D"docutils literal">=
<span class=3D"pre">sub('x*',</span> <span class=3D"pre">'-',</span> <span =
class=3D"pre">'abc')</span></code> returns
<code class=3D"docutils literal"><span class=3D"pre">'-a-b-c-'</span></code=
>.</p>
<p>In string-type <em>repl</em> arguments, in addition to the character esc=
apes and
backreferences described above,
<code class=3D"docutils literal"><span class=3D"pre">\g&lt;name&gt;</span><=
/code> will use the substring matched by the group named <code class=3D"doc=
utils literal"><span class=3D"pre">name</span></code>, as
defined by the <code class=3D"docutils literal"><span class=3D"pre">(?P&lt;=
name&gt;...)</span></code> syntax. <code class=3D"docutils literal"><span c=
lass=3D"pre">\g&lt;number&gt;</span></code> uses the corresponding
group number; <code class=3D"docutils literal"><span class=3D"pre">\g&lt;2&=
gt;</span></code> is therefore equivalent to <code class=3D"docutils litera=
l"><span class=3D"pre">\2</span></code>, but isn=E2=80=99t ambiguous
in a replacement such as <code class=3D"docutils literal"><span class=3D"pr=
e">\g&lt;2&gt;0</span></code>.  <code class=3D"docutils literal"><span clas=
s=3D"pre">\20</span></code> would be interpreted as a
reference to group 20, not a reference to group 2 followed by the literal
character <code class=3D"docutils literal"><span class=3D"pre">'0'</span></=
code>.  The backreference <code class=3D"docutils literal"><span class=3D"p=
re">\g&lt;0&gt;</span></code> substitutes in the entire
substring matched by the RE.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.1: </span>Added the=
 optional flags argument.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.5: </span>Unmatched=
 groups are replaced with an empty string.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.6: </span>Unknown e=
scapes in <em>pattern</em> consisting of <code class=3D"docutils literal"><=
span class=3D"pre">'\'</span></code> and an ASCII letter
now are errors.</p>
</div>
<div class=3D"deprecated-removed">
<p><span class=3D"versionmodified">Deprecated since version 3.5, will be re=
moved in version 3.7: </span>Unknown escapes in <em>repl</em> consisting of=
 <code class=3D"docutils literal"><span class=3D"pre">'\'</span></code> and=
 an ASCII letter now raise
a deprecation warning and will be forbidden in Python 3.7.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.subn">
<code class=3D"descclassname">re.</code><code class=3D"descname">subn</code=
><span class=3D"sig-paren">(</span><em>pattern</em>, <em>repl</em>, <em>str=
ing</em>, <em>count=3D0</em>, <em>flags=3D0</em><span class=3D"sig-paren">)=
</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re=
.html#re.subn" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Perform the same operation as <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/re.html#re.sub" title=3D"re.sub"><cod=
e class=3D"xref py py-func docutils literal"><span class=3D"pre">sub()</spa=
n></code></a>, but return a tuple <code class=3D"docutils literal"><span cl=
ass=3D"pre">(new_string,</span>
<span class=3D"pre">number_of_subs_made)</span></code>.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.1: </span>Added the=
 optional flags argument.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.5: </span>Unmatched=
 groups are replaced with an empty string.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.escape">
<code class=3D"descclassname">re.</code><code class=3D"descname">escape</co=
de><span class=3D"sig-paren">(</span><em>pattern</em><span class=3D"sig-par=
en">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/libra=
ry/re.html#re.escape" title=3D"Permalink to this definition">=C2=B6</a></dt=
>
<dd><p>Escape all the characters in <em>pattern</em> except ASCII letters, =
numbers and <code class=3D"docutils literal"><span class=3D"pre">'_'</span>=
</code>.
This is useful if you want to match an arbitrary literal string that may
have regular expression metacharacters in it.  For example:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">print<=
/span><span class=3D"p">(</span><span class=3D"n">re</span><span class=3D"o=
">.</span><span class=3D"n">escape</span><span class=3D"p">(</span><span cl=
ass=3D"s1">'python.exe'</span><span class=3D"p">))</span>
<span class=3D"go">python\.exe</span>

<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">legal_chars</span>=
 <span class=3D"o">=3D</span> <span class=3D"n">string</span><span class=3D=
"o">.</span><span class=3D"n">ascii_lowercase</span> <span class=3D"o">+</s=
pan> <span class=3D"n">string</span><span class=3D"o">.</span><span class=
=3D"n">digits</span> <span class=3D"o">+</span> <span class=3D"s2">"!#$%&am=
p;'*+-.^_`|~:"</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">print</span><span=
 class=3D"p">(</span><span class=3D"s1">'[</span><span class=3D"si">%s</spa=
n><span class=3D"s1">]+'</span> <span class=3D"o">%</span> <span class=3D"n=
">re</span><span class=3D"o">.</span><span class=3D"n">escape</span><span c=
lass=3D"p">(</span><span class=3D"n">legal_chars</span><span class=3D"p">))=
</span>
<span class=3D"go">[abcdefghijklmnopqrstuvwxyz0123456789\!\#\$\%\&amp;\'\*\=
+\-\.\^_\`\|\~\:]+</span>

<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">operators</span> <=
span class=3D"o">=3D</span> <span class=3D"p">[</span><span class=3D"s1">'+=
'</span><span class=3D"p">,</span> <span class=3D"s1">'-'</span><span class=
=3D"p">,</span> <span class=3D"s1">'*'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'/'</span><span class=3D"p">,</span> <span class=3D"s1">'**=
'</span><span class=3D"p">]</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">print</span><span=
 class=3D"p">(</span><span class=3D"s1">'|'</span><span class=3D"o">.</span=
><span class=3D"n">join</span><span class=3D"p">(</span><span class=3D"nb">=
map</span><span class=3D"p">(</span><span class=3D"n">re</span><span class=
=3D"o">.</span><span class=3D"n">escape</span><span class=3D"p">,</span> <s=
pan class=3D"nb">sorted</span><span class=3D"p">(</span><span class=3D"n">o=
perators</span><span class=3D"p">,</span> <span class=3D"n">reverse</span><=
span class=3D"o">=3D</span><span class=3D"kc">True</span><span class=3D"p">=
))))</span>
<span class=3D"go">\/|\-|\+|\*\*|\*</span>
</pre></div>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.3: </span>The <code=
 class=3D"docutils literal"><span class=3D"pre">'_'</span></code> character=
 is no longer escaped.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"re.purge">
<code class=3D"descclassname">re.</code><code class=3D"descname">purge</cod=
e><span class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a cl=
ass=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#re.pur=
ge" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Clear the regular expression cache.</p>
</dd></dl>

<dl class=3D"exception">
<dt id=3D"re.error">
<em class=3D"property">exception </em><code class=3D"descclassname">re.</co=
de><code class=3D"descname">error</code><span class=3D"sig-paren">(</span><=
em>msg</em>, <em>pattern=3DNone</em>, <em>pos=3DNone</em><span class=3D"sig=
-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/l=
ibrary/re.html#re.error" title=3D"Permalink to this definition">=C2=B6</a><=
/dt>
<dd><p>Exception raised when a string passed to one of the functions here i=
s not a
valid regular expression (for example, it might contain unmatched parenthes=
es)
or when some other error occurs during compilation or matching.  It is neve=
r an
error if a string contains no match for a pattern.  The error instance has
the following additional attributes:</p>
<dl class=3D"attribute">
<dt id=3D"re.error.msg">
<code class=3D"descname">msg</code><a class=3D"headerlink" href=3D"https://=
docs.python.org/3/library/re.html#re.error.msg" title=3D"Permalink to this =
definition">=C2=B6</a></dt>
<dd><p>The unformatted error message.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.error.pattern">
<code class=3D"descname">pattern</code><a class=3D"headerlink" href=3D"http=
s://docs.python.org/3/library/re.html#re.error.pattern" title=3D"Permalink =
to this definition">=C2=B6</a></dt>
<dd><p>The regular expression pattern.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.error.pos">
<code class=3D"descname">pos</code><a class=3D"headerlink" href=3D"https://=
docs.python.org/3/library/re.html#re.error.pos" title=3D"Permalink to this =
definition">=C2=B6</a></dt>
<dd><p>The index in <em>pattern</em> where compilation failed (may be <code=
 class=3D"docutils literal"><span class=3D"pre">None</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.error.lineno">
<code class=3D"descname">lineno</code><a class=3D"headerlink" href=3D"https=
://docs.python.org/3/library/re.html#re.error.lineno" title=3D"Permalink to=
 this definition">=C2=B6</a></dt>
<dd><p>The line corresponding to <em>pos</em> (may be <code class=3D"docuti=
ls literal"><span class=3D"pre">None</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.error.colno">
<code class=3D"descname">colno</code><a class=3D"headerlink" href=3D"https:=
//docs.python.org/3/library/re.html#re.error.colno" title=3D"Permalink to t=
his definition">=C2=B6</a></dt>
<dd><p>The column corresponding to <em>pos</em> (may be <code class=3D"docu=
tils literal"><span class=3D"pre">None</span></code>).</p>
</dd></dl>

<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.5: </span>Added add=
itional attributes.</p>
</div>
</dd></dl>

</div>
<div class=3D"section" id=3D"regular-expression-objects">
<span id=3D"re-objects"></span><h2>6.2.3. Regular Expression Objects<a clas=
s=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#regular-=
expression-objects" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>Compiled regular expression objects support the following methods and
attributes:</p>
<dl class=3D"method">
<dt id=3D"re.regex.search">
<code class=3D"descclassname">regex.</code><code class=3D"descname">search<=
/code><span class=3D"sig-paren">(</span><em>string</em><span class=3D"optio=
nal">[</span>, <em>pos</em><span class=3D"optional">[</span>, <em>endpos</e=
m><span class=3D"optional">]</span><span class=3D"optional">]</span><span c=
lass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pyt=
hon.org/3/library/re.html#re.regex.search" title=3D"Permalink to this defin=
ition">=C2=B6</a></dt>
<dd><p>Scan through <em>string</em> looking for the first location where th=
is regular
expression produces a match, and return a corresponding <a class=3D"referen=
ce internal" href=3D"https://docs.python.org/3/library/re.html#match-object=
s"><span>match object</span></a>.  Return <code class=3D"docutils literal">=
<span class=3D"pre">None</span></code> if no position in the string matches=
 the
pattern; note that this is different from finding a zero-length match at so=
me
point in the string.</p>
<p>The optional second parameter <em>pos</em> gives an index in the string =
where the
search is to start; it defaults to <code class=3D"docutils literal"><span c=
lass=3D"pre">0</span></code>.  This is not completely equivalent to
slicing the string; the <code class=3D"docutils literal"><span class=3D"pre=
">'^'</span></code> pattern character matches at the real beginning
of the string and at positions just after a newline, but not necessarily at=
 the
index where the search is to start.</p>
<p>The optional parameter <em>endpos</em> limits how far the string will be=
 searched; it
will be as if the string is <em>endpos</em> characters long, so only the ch=
aracters
from <em>pos</em> to <code class=3D"docutils literal"><span class=3D"pre">e=
ndpos</span> <span class=3D"pre">-</span> <span class=3D"pre">1</span></cod=
e> will be searched for a match.  If <em>endpos</em> is less
than <em>pos</em>, no match will be found; otherwise, if <em>rx</em> is a c=
ompiled regular
expression object, <code class=3D"docutils literal"><span class=3D"pre">rx.=
search(string,</span> <span class=3D"pre">0,</span> <span class=3D"pre">50)=
</span></code> is equivalent to
<code class=3D"docutils literal"><span class=3D"pre">rx.search(string[:50],=
</span> <span class=3D"pre">0)</span></code>.</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern=
</span> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=
=3D"o">.</span><span class=3D"n">compile</span><span class=3D"p">(</span><s=
pan class=3D"s2">"d"</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern</span><spa=
n class=3D"o">.</span><span class=3D"n">search</span><span class=3D"p">(</s=
pan><span class=3D"s2">"dog"</span><span class=3D"p">)</span>     <span cla=
ss=3D"c1"># Match at index 0</span>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(0, 1), match=3D'd'&gt=
;</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern</span><spa=
n class=3D"o">.</span><span class=3D"n">search</span><span class=3D"p">(</s=
pan><span class=3D"s2">"dog"</span><span class=3D"p">,</span> <span class=
=3D"mi">1</span><span class=3D"p">)</span>  <span class=3D"c1"># No match; =
search doesn't include the "d"</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.regex.match">
<code class=3D"descclassname">regex.</code><code class=3D"descname">match</=
code><span class=3D"sig-paren">(</span><em>string</em><span class=3D"option=
al">[</span>, <em>pos</em><span class=3D"optional">[</span>, <em>endpos</em=
><span class=3D"optional">]</span><span class=3D"optional">]</span><span cl=
ass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pyth=
on.org/3/library/re.html#re.regex.match" title=3D"Permalink to this definit=
ion">=C2=B6</a></dt>
<dd><p>If zero or more characters at the <em>beginning</em> of <em>string</=
em> match this regular
expression, return a corresponding <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/library/re.html#match-objects"><span>match object=
</span></a>.
Return <code class=3D"docutils literal"><span class=3D"pre">None</span></co=
de> if the string does not match the pattern; note that this is
different from a zero-length match.</p>
<p>The optional <em>pos</em> and <em>endpos</em> parameters have the same m=
eaning as for the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.regex.search" title=3D"re.regex.search"><code class=3D"xref py py=
-meth docutils literal"><span class=3D"pre">search()</span></code></a> meth=
od.</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern=
</span> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=
=3D"o">.</span><span class=3D"n">compile</span><span class=3D"p">(</span><s=
pan class=3D"s2">"o"</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern</span><spa=
n class=3D"o">.</span><span class=3D"n">match</span><span class=3D"p">(</sp=
an><span class=3D"s2">"dog"</span><span class=3D"p">)</span>      <span cla=
ss=3D"c1"># No match as "o" is not at the start of "dog".</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern</span><spa=
n class=3D"o">.</span><span class=3D"n">match</span><span class=3D"p">(</sp=
an><span class=3D"s2">"dog"</span><span class=3D"p">,</span> <span class=3D=
"mi">1</span><span class=3D"p">)</span>   <span class=3D"c1"># Match as "o"=
 is the 2nd character of "dog".</span>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(1, 2), match=3D'o'&gt=
;</span>
</pre></div>
</div>
<p>If you want to locate a match anywhere in <em>string</em>, use
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.regex.search" title=3D"re.regex.search"><code class=3D"xref py py=
-meth docutils literal"><span class=3D"pre">search()</span></code></a> inst=
ead (see also <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/re.html#search-vs-match"><span>search() vs. match()</span></a>=
).</p>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.regex.fullmatch">
<code class=3D"descclassname">regex.</code><code class=3D"descname">fullmat=
ch</code><span class=3D"sig-paren">(</span><em>string</em><span class=3D"op=
tional">[</span>, <em>pos</em><span class=3D"optional">[</span>, <em>endpos=
</em><span class=3D"optional">]</span><span class=3D"optional">]</span><spa=
n class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.=
python.org/3/library/re.html#re.regex.fullmatch" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>If the whole <em>string</em> matches this regular expression, return=
 a corresponding
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#match-objects"><span>match object</span></a>.  Return <code class=3D=
"docutils literal"><span class=3D"pre">None</span></code> if the string doe=
s not
match the pattern; note that this is different from a zero-length match.</p=
>
<p>The optional <em>pos</em> and <em>endpos</em> parameters have the same m=
eaning as for the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.regex.search" title=3D"re.regex.search"><code class=3D"xref py py=
-meth docutils literal"><span class=3D"pre">search()</span></code></a> meth=
od.</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern=
</span> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=
=3D"o">.</span><span class=3D"n">compile</span><span class=3D"p">(</span><s=
pan class=3D"s2">"o[gh]"</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern</span><spa=
n class=3D"o">.</span><span class=3D"n">fullmatch</span><span class=3D"p">(=
</span><span class=3D"s2">"dog"</span><span class=3D"p">)</span>      <span=
 class=3D"c1"># No match as "o" is not at the start of "dog".</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern</span><spa=
n class=3D"o">.</span><span class=3D"n">fullmatch</span><span class=3D"p">(=
</span><span class=3D"s2">"ogre"</span><span class=3D"p">)</span>     <span=
 class=3D"c1"># No match as not the full string matches.</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pattern</span><spa=
n class=3D"o">.</span><span class=3D"n">fullmatch</span><span class=3D"p">(=
</span><span class=3D"s2">"doggie"</span><span class=3D"p">,</span> <span c=
lass=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"mi">3</span><=
span class=3D"p">)</span>   <span class=3D"c1"># Matches within given limit=
s.</span>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(1, 3), match=3D'og'&g=
t;</span>
</pre></div>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.4.</span></p>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.regex.split">
<code class=3D"descclassname">regex.</code><code class=3D"descname">split</=
code><span class=3D"sig-paren">(</span><em>string</em>, <em>maxsplit=3D0</e=
m><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https:/=
/docs.python.org/3/library/re.html#re.regex.split" title=3D"Permalink to th=
is definition">=C2=B6</a></dt>
<dd><p>Identical to the <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/re.html#re.split" title=3D"re.split"><code class=3D"=
xref py py-func docutils literal"><span class=3D"pre">split()</span></code>=
</a> function, using the compiled pattern.</p>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.regex.findall">
<code class=3D"descclassname">regex.</code><code class=3D"descname">findall=
</code><span class=3D"sig-paren">(</span><em>string</em><span class=3D"opti=
onal">[</span>, <em>pos</em><span class=3D"optional">[</span>, <em>endpos</=
em><span class=3D"optional">]</span><span class=3D"optional">]</span><span =
class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.py=
thon.org/3/library/re.html#re.regex.findall" title=3D"Permalink to this def=
inition">=C2=B6</a></dt>
<dd><p>Similar to the <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/library/re.html#re.findall" title=3D"re.findall"><code class=
=3D"xref py py-func docutils literal"><span class=3D"pre">findall()</span><=
/code></a> function, using the compiled pattern, but
also accepts optional <em>pos</em> and <em>endpos</em> parameters that limi=
t the search
region like for <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/re.html#re.match" title=3D"re.match"><code class=3D"xref py =
py-meth docutils literal"><span class=3D"pre">match()</span></code></a>.</p=
>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.regex.finditer">
<code class=3D"descclassname">regex.</code><code class=3D"descname">findite=
r</code><span class=3D"sig-paren">(</span><em>string</em><span class=3D"opt=
ional">[</span>, <em>pos</em><span class=3D"optional">[</span>, <em>endpos<=
/em><span class=3D"optional">]</span><span class=3D"optional">]</span><span=
 class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.p=
ython.org/3/library/re.html#re.regex.finditer" title=3D"Permalink to this d=
efinition">=C2=B6</a></dt>
<dd><p>Similar to the <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/library/re.html#re.finditer" title=3D"re.finditer"><code class=
=3D"xref py py-func docutils literal"><span class=3D"pre">finditer()</span>=
</code></a> function, using the compiled pattern, but
also accepts optional <em>pos</em> and <em>endpos</em> parameters that limi=
t the search
region like for <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/re.html#re.match" title=3D"re.match"><code class=3D"xref py =
py-meth docutils literal"><span class=3D"pre">match()</span></code></a>.</p=
>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.regex.sub">
<code class=3D"descclassname">regex.</code><code class=3D"descname">sub</co=
de><span class=3D"sig-paren">(</span><em>repl</em>, <em>string</em>, <em>co=
unt=3D0</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"https://docs.python.org/3/library/re.html#re.regex.sub" title=3D"Permal=
ink to this definition">=C2=B6</a></dt>
<dd><p>Identical to the <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/re.html#re.sub" title=3D"re.sub"><code class=3D"xref=
 py py-func docutils literal"><span class=3D"pre">sub()</span></code></a> f=
unction, using the compiled pattern.</p>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.regex.subn">
<code class=3D"descclassname">regex.</code><code class=3D"descname">subn</c=
ode><span class=3D"sig-paren">(</span><em>repl</em>, <em>string</em>, <em>c=
ount=3D0</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"https://docs.python.org/3/library/re.html#re.regex.subn" title=3D"Perma=
link to this definition">=C2=B6</a></dt>
<dd><p>Identical to the <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/re.html#re.subn" title=3D"re.subn"><code class=3D"xr=
ef py py-func docutils literal"><span class=3D"pre">subn()</span></code></a=
> function, using the compiled pattern.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.regex.flags">
<code class=3D"descclassname">regex.</code><code class=3D"descname">flags</=
code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.h=
tml#re.regex.flags" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>The regex matching flags.  This is a combination of the flags given =
to
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.compile" title=3D"re.compile"><code class=3D"xref py py-func docu=
tils literal"><span class=3D"pre">compile()</span></code></a>, any <code cl=
ass=3D"docutils literal"><span class=3D"pre">(?...)</span></code> inline fl=
ags in the pattern, and implicit
flags such as <code class=3D"xref py py-data docutils literal"><span class=
=3D"pre">UNICODE</span></code> if the pattern is a Unicode string.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.regex.groups">
<code class=3D"descclassname">regex.</code><code class=3D"descname">groups<=
/code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.=
html#re.regex.groups" title=3D"Permalink to this definition">=C2=B6</a></dt=
>
<dd><p>The number of capturing groups in the pattern.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.regex.groupindex">
<code class=3D"descclassname">regex.</code><code class=3D"descname">groupin=
dex</code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library=
/re.html#re.regex.groupindex" title=3D"Permalink to this definition">=C2=B6=
</a></dt>
<dd><p>A dictionary mapping any symbolic group names defined by <code class=
=3D"docutils literal"><span class=3D"pre">(?P&lt;id&gt;)</span></code> to g=
roup
numbers.  The dictionary is empty if no symbolic groups were used in the
pattern.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.regex.pattern">
<code class=3D"descclassname">regex.</code><code class=3D"descname">pattern=
</code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re=
.html#re.regex.pattern" title=3D"Permalink to this definition">=C2=B6</a></=
dt>
<dd><p>The pattern string from which the RE object was compiled.</p>
</dd></dl>

</div>
<div class=3D"section" id=3D"match-objects">
<span id=3D"id1"></span><h2>6.2.4. Match Objects<a class=3D"headerlink" hre=
f=3D"https://docs.python.org/3/library/re.html#match-objects" title=3D"Perm=
alink to this headline">=C2=B6</a></h2>
<p>Match objects always have a boolean value of <code class=3D"docutils lit=
eral"><span class=3D"pre">True</span></code>.
Since <a class=3D"reference internal" href=3D"https://docs.python.org/3/lib=
rary/re.html#re.regex.match" title=3D"re.regex.match"><code class=3D"xref p=
y py-meth docutils literal"><span class=3D"pre">match()</span></code></a> a=
nd <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/re.html#re.regex.search" title=3D"re.regex.search"><code class=3D"xref py=
 py-meth docutils literal"><span class=3D"pre">search()</span></code></a> r=
eturn <code class=3D"docutils literal"><span class=3D"pre">None</span></cod=
e>
when there is no match, you can test whether there was a match with a simpl=
e
<code class=3D"docutils literal"><span class=3D"pre">if</span></code> state=
ment:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"n">match</span> <span class=
=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o">.</span><spa=
n class=3D"n">search</span><span class=3D"p">(</span><span class=3D"n">patt=
ern</span><span class=3D"p">,</span> <span class=3D"n">string</span><span c=
lass=3D"p">)</span>
<span class=3D"k">if</span> <span class=3D"n">match</span><span class=3D"p"=
>:</span>
    <span class=3D"n">process</span><span class=3D"p">(</span><span class=
=3D"n">match</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>Match objects support the following methods and attributes:</p>
<dl class=3D"method">
<dt id=3D"re.match.expand">
<code class=3D"descclassname">match.</code><code class=3D"descname">expand<=
/code><span class=3D"sig-paren">(</span><em>template</em><span class=3D"sig=
-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/l=
ibrary/re.html#re.match.expand" title=3D"Permalink to this definition">=C2=
=B6</a></dt>
<dd><p>Return the string obtained by doing backslash substitution on the te=
mplate
string <em>template</em>, as done by the <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/re.html#re.regex.sub" title=3D"re.r=
egex.sub"><code class=3D"xref py py-meth docutils literal"><span class=3D"p=
re">sub()</span></code></a> method.
Escapes such as <code class=3D"docutils literal"><span class=3D"pre">\n</sp=
an></code> are converted to the appropriate characters,
and numeric backreferences (<code class=3D"docutils literal"><span class=3D=
"pre">\1</span></code>, <code class=3D"docutils literal"><span class=3D"pre=
">\2</span></code>) and named backreferences
(<code class=3D"docutils literal"><span class=3D"pre">\g&lt;1&gt;</span></c=
ode>, <code class=3D"docutils literal"><span class=3D"pre">\g&lt;name&gt;</=
span></code>) are replaced by the contents of the
corresponding group.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified">Changed in version 3.5: </span>Unmatched=
 groups are replaced with an empty string.</p>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.match.group">
<code class=3D"descclassname">match.</code><code class=3D"descname">group</=
code><span class=3D"sig-paren">(</span><span class=3D"optional">[</span><em=
>group1</em>, <em>...</em><span class=3D"optional">]</span><span class=3D"s=
ig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3=
/library/re.html#re.match.group" title=3D"Permalink to this definition">=C2=
=B6</a></dt>
<dd><p>Returns one or more subgroups of the match.  If there is a single ar=
gument, the
result is a single string; if there are multiple arguments, the result is a
tuple with one item per argument. Without arguments, <em>group1</em> defaul=
ts to zero
(the whole match is returned). If a <em>groupN</em> argument is zero, the c=
orresponding
return value is the entire matching string; if it is in the inclusive range
[1..99], it is the string matching the corresponding parenthesized group.  =
If a
group number is negative or larger than the number of groups defined in the
pattern, an <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/exceptions.html#IndexError" title=3D"IndexError"><code class=3D"=
xref py py-exc docutils literal"><span class=3D"pre">IndexError</span></cod=
e></a> exception is raised. If a group is contained in a
part of the pattern that did not match, the corresponding result is <code c=
lass=3D"docutils literal"><span class=3D"pre">None</span></code>.
If a group is contained in a part of the pattern that matched multiple time=
s,
the last match is returned.</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span=
> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o"=
>.</span><span class=3D"n">match</span><span class=3D"p">(</span><span clas=
s=3D"s2">r"(\w+) (\w+)"</span><span class=3D"p">,</span> <span class=3D"s2"=
>"Isaac Newton, physicist"</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"mi">0</span><span class=3D"p">)</span>       <span class=3D"c1"=
># The entire match</span>
<span class=3D"go">'Isaac Newton'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"mi">1</span><span class=3D"p">)</span>       <span class=3D"c1"=
># The first parenthesized subgroup.</span>
<span class=3D"go">'Isaac'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"mi">2</span><span class=3D"p">)</span>       <span class=3D"c1"=
># The second parenthesized subgroup.</span>
<span class=3D"go">'Newton'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"mi">2</sp=
an><span class=3D"p">)</span>    <span class=3D"c1"># Multiple arguments gi=
ve us a tuple.</span>
<span class=3D"go">('Isaac', 'Newton')</span>
</pre></div>
</div>
<p>If the regular expression uses the <code class=3D"docutils literal"><spa=
n class=3D"pre">(?P&lt;name&gt;...)</span></code> syntax, the <em>groupN</e=
m>
arguments may also be strings identifying groups by their group name.  If a
string argument is not used as a group name in the pattern, an <a class=3D"=
reference internal" href=3D"https://docs.python.org/3/library/exceptions.ht=
ml#IndexError" title=3D"IndexError"><code class=3D"xref py py-exc docutils =
literal"><span class=3D"pre">IndexError</span></code></a>
exception is raised.</p>
<p>A moderately complicated example:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span=
> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o"=
>.</span><span class=3D"n">match</span><span class=3D"p">(</span><span clas=
s=3D"s2">r"(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)"</span><span =
class=3D"p">,</span> <span class=3D"s2">"Malcolm Reynolds"</span><span clas=
s=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"s1">'first_name'</span><span class=3D"p">)</span>
<span class=3D"go">'Malcolm'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"s1">'last_name'</span><span class=3D"p">)</span>
<span class=3D"go">'Reynolds'</span>
</pre></div>
</div>
<p>Named groups can also be referred to by their index:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span=
><span class=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">=
(</span><span class=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"go">'Malcolm'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"mi">2</span><span class=3D"p">)</span>
<span class=3D"go">'Reynolds'</span>
</pre></div>
</div>
<p>If a group matches multiple times, only the last match is accessible:</p=
>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span=
> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o"=
>.</span><span class=3D"n">match</span><span class=3D"p">(</span><span clas=
s=3D"s2">r"(..)+"</span><span class=3D"p">,</span> <span class=3D"s2">"a1b2=
c3"</span><span class=3D"p">)</span>  <span class=3D"c1"># Matches 3 times.=
</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><sp=
an class=3D"mi">1</span><span class=3D"p">)</span>                        <=
span class=3D"c1"># Returns only the last match.</span>
<span class=3D"go">'c3'</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.match.__getitem__">
<code class=3D"descclassname">match.</code><code class=3D"descname">__getit=
em__</code><span class=3D"sig-paren">(</span><em>g</em><span class=3D"sig-p=
aren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/lib=
rary/re.html#re.match.__getitem__" title=3D"Permalink to this definition">=
=C2=B6</a></dt>
<dd><p>This is identical to <code class=3D"docutils literal"><span class=3D=
"pre">m.group(g)</span></code>.  This allows easier access to
an individual group from a match:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span=
> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o"=
>.</span><span class=3D"n">match</span><span class=3D"p">(</span><span clas=
s=3D"s2">r"(\w+) (\w+)"</span><span class=3D"p">,</span> <span class=3D"s2"=
>"Isaac Newton, physicist"</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"p">[</span><span class=3D"mi">0</span><span class=3D"p">]</span>      =
 <span class=3D"c1"># The entire match</span>
<span class=3D"go">'Isaac Newton'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">]</span>      =
 <span class=3D"c1"># The first parenthesized subgroup.</span>
<span class=3D"go">'Isaac'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"p">[</span><span class=3D"mi">2</span><span class=3D"p">]</span>      =
 <span class=3D"c1"># The second parenthesized subgroup.</span>
<span class=3D"go">'Newton'</span>
</pre></div>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.6.</span></p>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.match.groups">
<code class=3D"descclassname">match.</code><code class=3D"descname">groups<=
/code><span class=3D"sig-paren">(</span><em>default=3DNone</em><span class=
=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.=
org/3/library/re.html#re.match.groups" title=3D"Permalink to this definitio=
n">=C2=B6</a></dt>
<dd><p>Return a tuple containing all the subgroups of the match, from 1 up =
to however
many groups are in the pattern.  The <em>default</em> argument is used for =
groups that
did not participate in the match; it defaults to <code class=3D"docutils li=
teral"><span class=3D"pre">None</span></code>.</p>
<p>For example:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span=
> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o"=
>.</span><span class=3D"n">match</span><span class=3D"p">(</span><span clas=
s=3D"s2">r"(\d+)\.(\d+)"</span><span class=3D"p">,</span> <span class=3D"s2=
">"24.1632"</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">groups</span><span class=3D"p">()</span>
<span class=3D"go">('24', '1632')</span>
</pre></div>
</div>
<p>If we make the decimal place and everything after it optional, not all g=
roups
might participate in the match.  These groups will default to <code class=
=3D"docutils literal"><span class=3D"pre">None</span></code> unless
the <em>default</em> argument is given:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span=
> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o"=
>.</span><span class=3D"n">match</span><span class=3D"p">(</span><span clas=
s=3D"s2">r"(\d+)\.?(\d+)?"</span><span class=3D"p">,</span> <span class=3D"=
s2">"24"</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">groups</span><span class=3D"p">()</span> =
     <span class=3D"c1"># Second group defaults to None.</span>
<span class=3D"go">('24', None)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">groups</span><span class=3D"p">(</span><s=
pan class=3D"s1">'0'</span><span class=3D"p">)</span>   <span class=3D"c1">=
# Now, the second group defaults to '0'.</span>
<span class=3D"go">('24', '0')</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.match.groupdict">
<code class=3D"descclassname">match.</code><code class=3D"descname">groupdi=
ct</code><span class=3D"sig-paren">(</span><em>default=3DNone</em><span cla=
ss=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pytho=
n.org/3/library/re.html#re.match.groupdict" title=3D"Permalink to this defi=
nition">=C2=B6</a></dt>
<dd><p>Return a dictionary containing all the <em>named</em> subgroups of t=
he match, keyed by
the subgroup name.  The <em>default</em> argument is used for groups that d=
id not
participate in the match; it defaults to <code class=3D"docutils literal"><=
span class=3D"pre">None</span></code>.  For example:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span=
> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o"=
>.</span><span class=3D"n">match</span><span class=3D"p">(</span><span clas=
s=3D"s2">r"(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)"</span><span =
class=3D"p">,</span> <span class=3D"s2">"Malcolm Reynolds"</span><span clas=
s=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span><span clas=
s=3D"o">.</span><span class=3D"n">groupdict</span><span class=3D"p">()</spa=
n>
<span class=3D"go">{'first_name': 'Malcolm', 'last_name': 'Reynolds'}</span=
>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.match.start">
<code class=3D"descclassname">match.</code><code class=3D"descname">start</=
code><span class=3D"sig-paren">(</span><span class=3D"optional">[</span><em=
>group</em><span class=3D"optional">]</span><span class=3D"sig-paren">)</sp=
an><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.htm=
l#re.match.start" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dt id=3D"re.match.end">
<code class=3D"descclassname">match.</code><code class=3D"descname">end</co=
de><span class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>g=
roup</em><span class=3D"optional">]</span><span class=3D"sig-paren">)</span=
><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#=
re.match.end" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return the indices of the start and end of the substring matched by =
<em>group</em>;
<em>group</em> defaults to zero (meaning the whole matched substring). Retu=
rn <code class=3D"docutils literal"><span class=3D"pre">-1</span></code> if
<em>group</em> exists but did not contribute to the match.  For a match obj=
ect <em>m</em>, and
a group <em>g</em> that did contribute to the match, the substring matched =
by group <em>g</em>
(equivalent to <code class=3D"docutils literal"><span class=3D"pre">m.group=
(g)</span></code>) is</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"n">m</span><span class=3D"o=
">.</span><span class=3D"n">string</span><span class=3D"p">[</span><span cl=
ass=3D"n">m</span><span class=3D"o">.</span><span class=3D"n">start</span><=
span class=3D"p">(</span><span class=3D"n">g</span><span class=3D"p">):</sp=
an><span class=3D"n">m</span><span class=3D"o">.</span><span class=3D"n">en=
d</span><span class=3D"p">(</span><span class=3D"n">g</span><span class=3D"=
p">)]</span>
</pre></div>
</div>
<p>Note that <code class=3D"docutils literal"><span class=3D"pre">m.start(g=
roup)</span></code> will equal <code class=3D"docutils literal"><span class=
=3D"pre">m.end(group)</span></code> if <em>group</em> matched a
null string.  For example, after <code class=3D"docutils literal"><span cla=
ss=3D"pre">m</span> <span class=3D"pre">=3D</span> <span class=3D"pre">re.s=
earch('b(c?)',</span> <span class=3D"pre">'cba')</span></code>,
<code class=3D"docutils literal"><span class=3D"pre">m.start(0)</span></cod=
e> is 1, <code class=3D"docutils literal"><span class=3D"pre">m.end(0)</spa=
n></code> is 2, <code class=3D"docutils literal"><span class=3D"pre">m.star=
t(1)</span></code> and <code class=3D"docutils literal"><span class=3D"pre"=
>m.end(1)</span></code> are both
2, and <code class=3D"docutils literal"><span class=3D"pre">m.start(2)</spa=
n></code> raises an <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/exceptions.html#IndexError" title=3D"IndexError"><code c=
lass=3D"xref py py-exc docutils literal"><span class=3D"pre">IndexError</sp=
an></code></a> exception.</p>
<p>An example that will remove <em>remove_this</em> from email addresses:</=
p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">email</=
span> <span class=3D"o">=3D</span> <span class=3D"s2">"tony@tiremove_thisge=
r.net"</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">m</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D"o">.</span><s=
pan class=3D"n">search</span><span class=3D"p">(</span><span class=3D"s2">"=
remove_this"</span><span class=3D"p">,</span> <span class=3D"n">email</span=
><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">email</span><span =
class=3D"p">[:</span><span class=3D"n">m</span><span class=3D"o">.</span><s=
pan class=3D"n">start</span><span class=3D"p">()]</span> <span class=3D"o">=
+</span> <span class=3D"n">email</span><span class=3D"p">[</span><span clas=
s=3D"n">m</span><span class=3D"o">.</span><span class=3D"n">end</span><span=
 class=3D"p">():]</span>
<span class=3D"go">'tony@tiger.net'</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"re.match.span">
<code class=3D"descclassname">match.</code><code class=3D"descname">span</c=
ode><span class=3D"sig-paren">(</span><span class=3D"optional">[</span><em>=
group</em><span class=3D"optional">]</span><span class=3D"sig-paren">)</spa=
n><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html=
#re.match.span" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>For a match <em>m</em>, return the 2-tuple <code class=3D"docutils l=
iteral"><span class=3D"pre">(m.start(group),</span> <span class=3D"pre">m.e=
nd(group))</span></code>. Note
that if <em>group</em> did not contribute to the match, this is <code class=
=3D"docutils literal"><span class=3D"pre">(-1,</span> <span class=3D"pre">-=
1)</span></code>.
<em>group</em> defaults to zero, the entire match.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.match.pos">
<code class=3D"descclassname">match.</code><code class=3D"descname">pos</co=
de><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.htm=
l#re.match.pos" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>The value of <em>pos</em> which was passed to the <a class=3D"refere=
nce internal" href=3D"https://docs.python.org/3/library/re.html#re.regex.se=
arch" title=3D"re.regex.search"><code class=3D"xref py py-meth docutils lit=
eral"><span class=3D"pre">search()</span></code></a> or
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.regex.match" title=3D"re.regex.match"><code class=3D"xref py py-m=
eth docutils literal"><span class=3D"pre">match()</span></code></a> method =
of a <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/re.html#re-objects"><span>regex object</span></a>.  This is
the index into the string at which the RE engine started looking for a matc=
h.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.match.endpos">
<code class=3D"descclassname">match.</code><code class=3D"descname">endpos<=
/code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.=
html#re.match.endpos" title=3D"Permalink to this definition">=C2=B6</a></dt=
>
<dd><p>The value of <em>endpos</em> which was passed to the <a class=3D"ref=
erence internal" href=3D"https://docs.python.org/3/library/re.html#re.regex=
.search" title=3D"re.regex.search"><code class=3D"xref py py-meth docutils =
literal"><span class=3D"pre">search()</span></code></a> or
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.regex.match" title=3D"re.regex.match"><code class=3D"xref py py-m=
eth docutils literal"><span class=3D"pre">match()</span></code></a> method =
of a <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/re.html#re-objects"><span>regex object</span></a>.  This is
the index into the string beyond which the RE engine will not go.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.match.lastindex">
<code class=3D"descclassname">match.</code><code class=3D"descname">lastind=
ex</code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/=
re.html#re.match.lastindex" title=3D"Permalink to this definition">=C2=B6</=
a></dt>
<dd><p>The integer index of the last matched capturing group, or <code clas=
s=3D"docutils literal"><span class=3D"pre">None</span></code> if no group
was matched at all. For example, the expressions <code class=3D"docutils li=
teral"><span class=3D"pre">(a)b</span></code>, <code class=3D"docutils lite=
ral"><span class=3D"pre">((a)(b))</span></code>, and
<code class=3D"docutils literal"><span class=3D"pre">((ab))</span></code> w=
ill have <code class=3D"docutils literal"><span class=3D"pre">lastindex</sp=
an> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">1</span></code> i=
f applied to the string <code class=3D"docutils literal"><span class=3D"pre=
">'ab'</span></code>, while
the expression <code class=3D"docutils literal"><span class=3D"pre">(a)(b)<=
/span></code> will have <code class=3D"docutils literal"><span class=3D"pre=
">lastindex</span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">2<=
/span></code>, if applied to the same
string.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.match.lastgroup">
<code class=3D"descclassname">match.</code><code class=3D"descname">lastgro=
up</code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/=
re.html#re.match.lastgroup" title=3D"Permalink to this definition">=C2=B6</=
a></dt>
<dd><p>The name of the last matched capturing group, or <code class=3D"docu=
tils literal"><span class=3D"pre">None</span></code> if the group didn=E2=
=80=99t
have a name, or if no group was matched at all.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.match.re">
<code class=3D"descclassname">match.</code><code class=3D"descname">re</cod=
e><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html=
#re.match.re" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>The regular expression object whose <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/library/re.html#re.regex.match" title=3D"=
re.regex.match"><code class=3D"xref py py-meth docutils literal"><span clas=
s=3D"pre">match()</span></code></a> or
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.regex.search" title=3D"re.regex.search"><code class=3D"xref py py=
-meth docutils literal"><span class=3D"pre">search()</span></code></a> meth=
od produced this match instance.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"re.match.string">
<code class=3D"descclassname">match.</code><code class=3D"descname">string<=
/code><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/re.=
html#re.match.string" title=3D"Permalink to this definition">=C2=B6</a></dt=
>
<dd><p>The string passed to <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/library/re.html#re.regex.match" title=3D"re.regex.match"=
><code class=3D"xref py py-meth docutils literal"><span class=3D"pre">match=
()</span></code></a> or <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/re.html#re.regex.search" title=3D"re.regex.search"><=
code class=3D"xref py py-meth docutils literal"><span class=3D"pre">search(=
)</span></code></a>.</p>
</dd></dl>

</div>
<div class=3D"section" id=3D"regular-expression-examples">
<span id=3D"re-examples"></span><h2>6.2.5. Regular Expression Examples<a cl=
ass=3D"headerlink" href=3D"https://docs.python.org/3/library/re.html#regula=
r-expression-examples" title=3D"Permalink to this headline">=C2=B6</a></h2>
<div class=3D"section" id=3D"checking-for-a-pair">
<h3>6.2.5.1. Checking for a Pair<a class=3D"headerlink" href=3D"https://doc=
s.python.org/3/library/re.html#checking-for-a-pair" title=3D"Permalink to t=
his headline">=C2=B6</a></h3>
<p>In this example, we=E2=80=99ll use the following helper function to disp=
lay match
objects a little more gracefully:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"k">def</span> <span class=
=3D"nf">displaymatch</span><span class=3D"p">(</span><span class=3D"n">matc=
h</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">match</span> <span class=
=3D"ow">is</span> <span class=3D"kc">None</span><span class=3D"p">:</span>
        <span class=3D"k">return</span> <span class=3D"kc">None</span>
    <span class=3D"k">return</span> <span class=3D"s1">'&lt;Match: </span><=
span class=3D"si">%r</span><span class=3D"s1">, groups=3D</span><span class=
=3D"si">%r</span><span class=3D"s1">&gt;'</span> <span class=3D"o">%</span>=
 <span class=3D"p">(</span><span class=3D"n">match</span><span class=3D"o">=
.</span><span class=3D"n">group</span><span class=3D"p">(),</span> <span cl=
ass=3D"n">match</span><span class=3D"o">.</span><span class=3D"n">groups</s=
pan><span class=3D"p">())</span>
</pre></div>
</div>
<p>Suppose you are writing a poker program where a player=E2=80=99s hand is=
 represented as
a 5-character string with each character representing a card, =E2=80=9Ca=E2=
=80=9D for ace, =E2=80=9Ck=E2=80=9D
for king, =E2=80=9Cq=E2=80=9D for queen, =E2=80=9Cj=E2=80=9D for jack, =E2=
=80=9Ct=E2=80=9D for 10, and =E2=80=9C2=E2=80=9D through =E2=80=9C9=E2=80=
=9D
representing the card with that value.</p>
<p>To see if a given string is a valid hand, one could do the following:</p=
>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">valid</=
span> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=
=3D"o">.</span><span class=3D"n">compile</span><span class=3D"p">(</span><s=
pan class=3D"s2">r"^[a2-9tjqk]</span><span class=3D"si">{5}</span><span cla=
ss=3D"s2">$"</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">displaymatch</span=
><span class=3D"p">(</span><span class=3D"n">valid</span><span class=3D"o">=
.</span><span class=3D"n">match</span><span class=3D"p">(</span><span class=
=3D"s2">"akt5q"</span><span class=3D"p">))</span>  <span class=3D"c1"># Val=
id.</span>
<span class=3D"go">"&lt;Match: 'akt5q', groups=3D()&gt;"</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">displaymatch</span=
><span class=3D"p">(</span><span class=3D"n">valid</span><span class=3D"o">=
.</span><span class=3D"n">match</span><span class=3D"p">(</span><span class=
=3D"s2">"akt5e"</span><span class=3D"p">))</span>  <span class=3D"c1"># Inv=
alid.</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">displaymatch</span=
><span class=3D"p">(</span><span class=3D"n">valid</span><span class=3D"o">=
.</span><span class=3D"n">match</span><span class=3D"p">(</span><span class=
=3D"s2">"akt"</span><span class=3D"p">))</span>    <span class=3D"c1"># Inv=
alid.</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">displaymatch</span=
><span class=3D"p">(</span><span class=3D"n">valid</span><span class=3D"o">=
.</span><span class=3D"n">match</span><span class=3D"p">(</span><span class=
=3D"s2">"727ak"</span><span class=3D"p">))</span>  <span class=3D"c1"># Val=
id.</span>
<span class=3D"go">"&lt;Match: '727ak', groups=3D()&gt;"</span>
</pre></div>
</div>
<p>That last hand, <code class=3D"docutils literal"><span class=3D"pre">"72=
7ak"</span></code>, contained a pair, or two of the same valued cards.
To match this with a regular expression, one could use backreferences as su=
ch:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pair</s=
pan> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=3D=
"o">.</span><span class=3D"n">compile</span><span class=3D"p">(</span><span=
 class=3D"s2">r".*(.).*\1"</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">displaymatch</span=
><span class=3D"p">(</span><span class=3D"n">pair</span><span class=3D"o">.=
</span><span class=3D"n">match</span><span class=3D"p">(</span><span class=
=3D"s2">"717ak"</span><span class=3D"p">))</span>     <span class=3D"c1"># =
Pair of 7s.</span>
<span class=3D"go">"&lt;Match: '717', groups=3D('7',)&gt;"</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">displaymatch</span=
><span class=3D"p">(</span><span class=3D"n">pair</span><span class=3D"o">.=
</span><span class=3D"n">match</span><span class=3D"p">(</span><span class=
=3D"s2">"718ak"</span><span class=3D"p">))</span>     <span class=3D"c1"># =
No pairs.</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">displaymatch</span=
><span class=3D"p">(</span><span class=3D"n">pair</span><span class=3D"o">.=
</span><span class=3D"n">match</span><span class=3D"p">(</span><span class=
=3D"s2">"354aa"</span><span class=3D"p">))</span>     <span class=3D"c1"># =
Pair of aces.</span>
<span class=3D"go">"&lt;Match: '354aa', groups=3D('a',)&gt;"</span>
</pre></div>
</div>
<p>To find out what card the pair consists of, one could use the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.match.group" title=3D"re.match.group"><code class=3D"xref py py-m=
eth docutils literal"><span class=3D"pre">group()</span></code></a> method =
of the match object in the following manner:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pair</s=
pan><span class=3D"o">.</span><span class=3D"n">match</span><span class=3D"=
p">(</span><span class=3D"s2">"717ak"</span><span class=3D"p">)</span><span=
 class=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</spa=
n><span class=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"go">'7'</span>

<span class=3D"go"># Error because re.match() returns None, which doesn't h=
ave a group() method:</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pair</span><span c=
lass=3D"o">.</span><span class=3D"n">match</span><span class=3D"p">(</span>=
<span class=3D"s2">"718ak"</span><span class=3D"p">)</span><span class=3D"o=
">.</span><span class=3D"n">group</span><span class=3D"p">(</span><span cla=
ss=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"gt">Traceback (most recent call last):</span><span>
  File </span><span class=3D"nb">"&lt;pyshell#23&gt;"</span><span>, line </=
span><span class=3D"m">1</span><span>, in </span><span class=3D"n">&lt;modu=
le&gt;</span>
    <span class=3D"n">re</span><span class=3D"o">.</span><span class=3D"n">=
match</span><span class=3D"p">(</span><span class=3D"s2">r".*(.).*\1"</span=
><span class=3D"p">,</span> <span class=3D"s2">"718ak"</span><span class=3D=
"p">)</span><span class=3D"o">.</span><span class=3D"n">group</span><span c=
lass=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"gr">AttributeError</span><span>: </span><span class=3D"n">'N=
oneType' object has no attribute 'group'</span>

<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">pair</span><span c=
lass=3D"o">.</span><span class=3D"n">match</span><span class=3D"p">(</span>=
<span class=3D"s2">"354aa"</span><span class=3D"p">)</span><span class=3D"o=
">.</span><span class=3D"n">group</span><span class=3D"p">(</span><span cla=
ss=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"go">'a'</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"simulating-scanf">
<h3>6.2.5.2. Simulating scanf()<a class=3D"headerlink" href=3D"https://docs=
.python.org/3/library/re.html#simulating-scanf" title=3D"Permalink to this =
headline">=C2=B6</a></h3>
<p id=3D"index-0">Python does not currently have an equivalent to <code cla=
ss=3D"xref c c-func docutils literal"><span class=3D"pre">scanf()</span></c=
ode>.  Regular
expressions are generally more powerful, though also more verbose, than
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">scanf()<=
/span></code> format strings.  The table below offers some more-or-less
equivalent mappings between <code class=3D"xref c c-func docutils literal">=
<span class=3D"pre">scanf()</span></code> format tokens and regular
expressions.</p>
<table border=3D"1" class=3D"docutils">
<colgroup>
<col width=3D"42%">
<col width=3D"58%">
</colgroup>
<thead valign=3D"bottom">
<tr class=3D"row-odd"><th class=3D"head"><code class=3D"xref c c-func docut=
ils literal"><span class=3D"pre">scanf()</span></code> Token</th>
<th class=3D"head">Regular Expression</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr class=3D"row-even"><td><code class=3D"docutils literal"><span class=3D"=
pre">%c</span></code></td>
<td><code class=3D"docutils literal"><span class=3D"pre">.</span></code></t=
d>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal"><span class=3D"p=
re">%5c</span></code></td>
<td><code class=3D"docutils literal"><span class=3D"pre">.{5}</span></code>=
</td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal"><span class=3D"=
pre">%d</span></code></td>
<td><code class=3D"docutils literal"><span class=3D"pre">[-+]?\d+</span></c=
ode></td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal"><span class=3D"p=
re">%e</span></code>, <code class=3D"docutils literal"><span class=3D"pre">=
%E</span></code>, <code class=3D"docutils literal"><span class=3D"pre">%f</=
span></code>, <code class=3D"docutils literal"><span class=3D"pre">%g</span=
></code></td>
<td><code class=3D"docutils literal"><span class=3D"pre">[-+]?(\d+(\.\d*)?|=
\.\d+)([eE][-+]?\d+)?</span></code></td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal"><span class=3D"=
pre">%i</span></code></td>
<td><code class=3D"docutils literal"><span class=3D"pre">[-+]?(0[xX][\dA-Fa=
-f]+|0[0-7]*|\d+)</span></code></td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal"><span class=3D"p=
re">%o</span></code></td>
<td><code class=3D"docutils literal"><span class=3D"pre">[-+]?[0-7]+</span>=
</code></td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal"><span class=3D"=
pre">%s</span></code></td>
<td><code class=3D"docutils literal"><span class=3D"pre">\S+</span></code><=
/td>
</tr>
<tr class=3D"row-odd"><td><code class=3D"docutils literal"><span class=3D"p=
re">%u</span></code></td>
<td><code class=3D"docutils literal"><span class=3D"pre">\d+</span></code><=
/td>
</tr>
<tr class=3D"row-even"><td><code class=3D"docutils literal"><span class=3D"=
pre">%x</span></code>, <code class=3D"docutils literal"><span class=3D"pre"=
>%X</span></code></td>
<td><code class=3D"docutils literal"><span class=3D"pre">[-+]?(0[xX])?[\dA-=
Fa-f]+</span></code></td>
</tr>
</tbody>
</table>
<p>To extract the filename and numbers from a string like</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"o">/</span><span class=3D"n=
">usr</span><span class=3D"o">/</span><span class=3D"n">sbin</span><span cl=
ass=3D"o">/</span><span class=3D"n">sendmail</span> <span class=3D"o">-</sp=
an> <span class=3D"mi">0</span> <span class=3D"n">errors</span><span class=
=3D"p">,</span> <span class=3D"mi">4</span> <span class=3D"n">warnings</spa=
n>
</pre></div>
</div>
<p>you would use a <code class=3D"xref c c-func docutils literal"><span cla=
ss=3D"pre">scanf()</span></code> format like</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"o">%</span><span class=3D"n=
">s</span> <span class=3D"o">-</span> <span class=3D"o">%</span><span class=
=3D"n">d</span> <span class=3D"n">errors</span><span class=3D"p">,</span> <=
span class=3D"o">%</span><span class=3D"n">d</span> <span class=3D"n">warni=
ngs</span>
</pre></div>
</div>
<p>The equivalent regular expression would be</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"p">(</span>\<span class=3D"=
n">S</span><span class=3D"o">+</span><span class=3D"p">)</span> <span class=
=3D"o">-</span> <span class=3D"p">(</span>\<span class=3D"n">d</span><span =
class=3D"o">+</span><span class=3D"p">)</span> <span class=3D"n">errors</sp=
an><span class=3D"p">,</span> <span class=3D"p">(</span>\<span class=3D"n">=
d</span><span class=3D"o">+</span><span class=3D"p">)</span> <span class=3D=
"n">warnings</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"search-vs-match">
<span id=3D"id2"></span><h3>6.2.5.3. search() vs. match()<a class=3D"header=
link" href=3D"https://docs.python.org/3/library/re.html#search-vs-match" ti=
tle=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Python offers two different primitive operations based on regular expres=
sions:
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.match" title=3D"re.match"><code class=3D"xref py py-func docutils=
 literal"><span class=3D"pre">re.match()</span></code></a> checks for a mat=
ch only at the beginning of the string, while
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/r=
e.html#re.search" title=3D"re.search"><code class=3D"xref py py-func docuti=
ls literal"><span class=3D"pre">re.search()</span></code></a> checks for a =
match anywhere in the string (this is what Perl
does by default).</p>
<p>For example:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</spa=
n><span class=3D"o">.</span><span class=3D"n">match</span><span class=3D"p"=
>(</span><span class=3D"s2">"c"</span><span class=3D"p">,</span> <span clas=
s=3D"s2">"abcdef"</span><span class=3D"p">)</span>    <span class=3D"c1"># =
No match</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">search</span><span class=3D"p">(</span><=
span class=3D"s2">"c"</span><span class=3D"p">,</span> <span class=3D"s2">"=
abcdef"</span><span class=3D"p">)</span>   <span class=3D"c1"># Match</span=
>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(2, 3), match=3D'c'&gt=
;</span>
</pre></div>
</div>
<p>Regular expressions beginning with <code class=3D"docutils literal"><spa=
n class=3D"pre">'^'</span></code> can be used with <a class=3D"reference in=
ternal" href=3D"https://docs.python.org/3/library/re.html#re.search" title=
=3D"re.search"><code class=3D"xref py py-func docutils literal"><span class=
=3D"pre">search()</span></code></a> to
restrict the match at the beginning of the string:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</spa=
n><span class=3D"o">.</span><span class=3D"n">match</span><span class=3D"p"=
>(</span><span class=3D"s2">"c"</span><span class=3D"p">,</span> <span clas=
s=3D"s2">"abcdef"</span><span class=3D"p">)</span>    <span class=3D"c1"># =
No match</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">search</span><span class=3D"p">(</span><=
span class=3D"s2">"^c"</span><span class=3D"p">,</span> <span class=3D"s2">=
"abcdef"</span><span class=3D"p">)</span>  <span class=3D"c1"># No match</s=
pan>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">search</span><span class=3D"p">(</span><=
span class=3D"s2">"^a"</span><span class=3D"p">,</span> <span class=3D"s2">=
"abcdef"</span><span class=3D"p">)</span>  <span class=3D"c1"># Match</span=
>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(0, 1), match=3D'a'&gt=
;</span>
</pre></div>
</div>
<p>Note however that in <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/re.html#re.MULTILINE" title=3D"re.MULTILINE"><code c=
lass=3D"xref py py-const docutils literal"><span class=3D"pre">MULTILINE</s=
pan></code></a> mode <a class=3D"reference internal" href=3D"https://docs.p=
ython.org/3/library/re.html#re.match" title=3D"re.match"><code class=3D"xre=
f py py-func docutils literal"><span class=3D"pre">match()</span></code></a=
> only matches at the
beginning of the string, whereas using <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/re.html#re.search" title=3D"re.search=
"><code class=3D"xref py py-func docutils literal"><span class=3D"pre">sear=
ch()</span></code></a> with a regular expression
beginning with <code class=3D"docutils literal"><span class=3D"pre">'^'</sp=
an></code> will match at the beginning of each line.</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</spa=
n><span class=3D"o">.</span><span class=3D"n">match</span><span class=3D"p"=
>(</span><span class=3D"s1">'X'</span><span class=3D"p">,</span> <span clas=
s=3D"s1">'A</span><span class=3D"se">\n</span><span class=3D"s1">B</span><s=
pan class=3D"se">\n</span><span class=3D"s1">X'</span><span class=3D"p">,</=
span> <span class=3D"n">re</span><span class=3D"o">.</span><span class=3D"n=
">MULTILINE</span><span class=3D"p">)</span>  <span class=3D"c1"># No match=
</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">search</span><span class=3D"p">(</span><=
span class=3D"s1">'^X'</span><span class=3D"p">,</span> <span class=3D"s1">=
'A</span><span class=3D"se">\n</span><span class=3D"s1">B</span><span class=
=3D"se">\n</span><span class=3D"s1">X'</span><span class=3D"p">,</span> <sp=
an class=3D"n">re</span><span class=3D"o">.</span><span class=3D"n">MULTILI=
NE</span><span class=3D"p">)</span>  <span class=3D"c1"># Match</span>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(4, 5), match=3D'X'&gt=
;</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"making-a-phonebook">
<h3>6.2.5.4. Making a Phonebook<a class=3D"headerlink" href=3D"https://docs=
.python.org/3/library/re.html#making-a-phonebook" title=3D"Permalink to thi=
s headline">=C2=B6</a></h3>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/re.html#re.split" title=3D"re.split"><code class=3D"xref py py-func docut=
ils literal"><span class=3D"pre">split()</span></code></a> splits a string =
into a list delimited by the passed pattern.  The
method is invaluable for converting textual data into data structures that =
can be
easily read and modified by Python as demonstrated in the following example=
 that
creates a phonebook.</p>
<p>First, here is the input.  Normally it may come from a file, here we are=
 using
triple-quoted string syntax:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">text</s=
pan> <span class=3D"o">=3D</span> <span class=3D"s2">"""Ross McFluff: 834.3=
45.1254 155 Elm Street</span>
<span class=3D"gp">...</span><span class=3D"s2"></span>
<span class=3D"gp">... </span><span class=3D"s2">Ronald Heathmore: 892.345.=
3428 436 Finley Avenue</span>
<span class=3D"gp">... </span><span class=3D"s2">Frank Burger: 925.541.7625=
 662 South Dogwood Way</span>
<span class=3D"gp">...</span><span class=3D"s2"></span>
<span class=3D"gp">...</span><span class=3D"s2"></span>
<span class=3D"gp">... </span><span class=3D"s2">Heather Albrecht: 548.326.=
4584 919 Park Place"""</span>
</pre></div>
</div>
<p>The entries are separated by one or more newlines. Now we convert the st=
ring
into a list with each nonempty line having its own entry:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">entries=
</span> <span class=3D"o">=3D</span> <span class=3D"n">re</span><span class=
=3D"o">.</span><span class=3D"n">split</span><span class=3D"p">(</span><spa=
n class=3D"s2">"</span><span class=3D"se">\n</span><span class=3D"s2">+"</s=
pan><span class=3D"p">,</span> <span class=3D"n">text</span><span class=3D"=
p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">entries</span>
<span class=3D"go">['Ross McFluff: 834.345.1254 155 Elm Street',</span>
<span class=3D"go">'Ronald Heathmore: 892.345.3428 436 Finley Avenue',</spa=
n>
<span class=3D"go">'Frank Burger: 925.541.7625 662 South Dogwood Way',</spa=
n>
<span class=3D"go">'Heather Albrecht: 548.326.4584 919 Park Place']</span>
</pre></div>
</div>
<p>Finally, split each entry into a list with first name, last name, teleph=
one
number, and address.  We use the <code class=3D"docutils literal"><span cla=
ss=3D"pre">maxsplit</span></code> parameter of <a class=3D"reference intern=
al" href=3D"https://docs.python.org/3/library/re.html#re.split" title=3D"re=
.split"><code class=3D"xref py py-func docutils literal"><span class=3D"pre=
">split()</span></code></a>
because the address has spaces, our splitting pattern, in it:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"p">[</span=
><span class=3D"n">re</span><span class=3D"o">.</span><span class=3D"n">spl=
it</span><span class=3D"p">(</span><span class=3D"s2">":? "</span><span cla=
ss=3D"p">,</span> <span class=3D"n">entry</span><span class=3D"p">,</span> =
<span class=3D"mi">3</span><span class=3D"p">)</span> <span class=3D"k">for=
</span> <span class=3D"n">entry</span> <span class=3D"ow">in</span> <span c=
lass=3D"n">entries</span><span class=3D"p">]</span>
<span class=3D"go">[['Ross', 'McFluff', '834.345.1254', '155 Elm Street'],<=
/span>
<span class=3D"go">['Ronald', 'Heathmore', '892.345.3428', '436 Finley Aven=
ue'],</span>
<span class=3D"go">['Frank', 'Burger', '925.541.7625', '662 South Dogwood W=
ay'],</span>
<span class=3D"go">['Heather', 'Albrecht', '548.326.4584', '919 Park Place'=
]]</span>
</pre></div>
</div>
<p>The <code class=3D"docutils literal"><span class=3D"pre">:?</span></code=
> pattern matches the colon after the last name, so that it does not
occur in the result list.  With a <code class=3D"docutils literal"><span cl=
ass=3D"pre">maxsplit</span></code> of <code class=3D"docutils literal"><spa=
n class=3D"pre">4</span></code>, we could separate the
house number from the street name:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"p">[</span=
><span class=3D"n">re</span><span class=3D"o">.</span><span class=3D"n">spl=
it</span><span class=3D"p">(</span><span class=3D"s2">":? "</span><span cla=
ss=3D"p">,</span> <span class=3D"n">entry</span><span class=3D"p">,</span> =
<span class=3D"mi">4</span><span class=3D"p">)</span> <span class=3D"k">for=
</span> <span class=3D"n">entry</span> <span class=3D"ow">in</span> <span c=
lass=3D"n">entries</span><span class=3D"p">]</span>
<span class=3D"go">[['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'=
],</span>
<span class=3D"go">['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley A=
venue'],</span>
<span class=3D"go">['Frank', 'Burger', '925.541.7625', '662', 'South Dogwoo=
d Way'],</span>
<span class=3D"go">['Heather', 'Albrecht', '548.326.4584', '919', 'Park Pla=
ce']]</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"text-munging">
<h3>6.2.5.5. Text Munging<a class=3D"headerlink" href=3D"https://docs.pytho=
n.org/3/library/re.html#text-munging" title=3D"Permalink to this headline">=
=C2=B6</a></h3>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/re.html#re.sub" title=3D"re.sub"><code class=3D"xref py py-func docutils =
literal"><span class=3D"pre">sub()</span></code></a> replaces every occurre=
nce of a pattern with a string or the
result of a function.  This example demonstrates using <a class=3D"referenc=
e internal" href=3D"https://docs.python.org/3/library/re.html#re.sub" title=
=3D"re.sub"><code class=3D"xref py py-func docutils literal"><span class=3D=
"pre">sub()</span></code></a> with
a function to =E2=80=9Cmunge=E2=80=9D text, or randomize the order of all t=
he characters
in each word of a sentence except for the first and last characters:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">def</sp=
an> <span class=3D"nf">repl</span><span class=3D"p">(</span><span class=3D"=
n">m</span><span class=3D"p">):</span>
<span class=3D"gp">... </span>    <span class=3D"n">inner_word</span> <span=
 class=3D"o">=3D</span> <span class=3D"nb">list</span><span class=3D"p">(</=
span><span class=3D"n">m</span><span class=3D"o">.</span><span class=3D"n">=
group</span><span class=3D"p">(</span><span class=3D"mi">2</span><span clas=
s=3D"p">))</span>
<span class=3D"gp">... </span>    <span class=3D"n">random</span><span clas=
s=3D"o">.</span><span class=3D"n">shuffle</span><span class=3D"p">(</span><=
span class=3D"n">inner_word</span><span class=3D"p">)</span>
<span class=3D"gp">... </span>    <span class=3D"k">return</span> <span cla=
ss=3D"n">m</span><span class=3D"o">.</span><span class=3D"n">group</span><s=
pan class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">)</spa=
n> <span class=3D"o">+</span> <span class=3D"s2">""</span><span class=3D"o"=
>.</span><span class=3D"n">join</span><span class=3D"p">(</span><span class=
=3D"n">inner_word</span><span class=3D"p">)</span> <span class=3D"o">+</spa=
n> <span class=3D"n">m</span><span class=3D"o">.</span><span class=3D"n">gr=
oup</span><span class=3D"p">(</span><span class=3D"mi">3</span><span class=
=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">text</span> <span =
class=3D"o">=3D</span> <span class=3D"s2">"Professor Abdolmalek, please rep=
ort your absences promptly."</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">sub</span><span class=3D"p">(</span><spa=
n class=3D"s2">r"(\w)(\w+)(\w)"</span><span class=3D"p">,</span> <span clas=
s=3D"n">repl</span><span class=3D"p">,</span> <span class=3D"n">text</span>=
<span class=3D"p">)</span>
<span class=3D"go">'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrp=
toy.'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">sub</span><span class=3D"p">(</span><spa=
n class=3D"s2">r"(\w)(\w+)(\w)"</span><span class=3D"p">,</span> <span clas=
s=3D"n">repl</span><span class=3D"p">,</span> <span class=3D"n">text</span>=
<span class=3D"p">)</span>
<span class=3D"go">'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlm=
rpy.'</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"finding-all-adverbs">
<h3>6.2.5.6. Finding all Adverbs<a class=3D"headerlink" href=3D"https://doc=
s.python.org/3/library/re.html#finding-all-adverbs" title=3D"Permalink to t=
his headline">=C2=B6</a></h3>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/re.html#re.findall" title=3D"re.findall"><code class=3D"xref py py-func d=
ocutils literal"><span class=3D"pre">findall()</span></code></a> matches <e=
m>all</em> occurrences of a pattern, not just the first
one as <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/re.html#re.search" title=3D"re.search"><code class=3D"xref py py-func=
 docutils literal"><span class=3D"pre">search()</span></code></a> does.  Fo=
r example, if one was a writer and wanted to
find all of the adverbs in some text, he or she might use <a class=3D"refer=
ence internal" href=3D"https://docs.python.org/3/library/re.html#re.findall=
" title=3D"re.findall"><code class=3D"xref py py-func docutils literal"><sp=
an class=3D"pre">findall()</span></code></a> in
the following manner:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">text</s=
pan> <span class=3D"o">=3D</span> <span class=3D"s2">"He was carefully disg=
uised but captured quickly by police."</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">findall</span><span class=3D"p">(</span>=
<span class=3D"s2">r"\w+ly"</span><span class=3D"p">,</span> <span class=3D=
"n">text</span><span class=3D"p">)</span>
<span class=3D"go">['carefully', 'quickly']</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"finding-all-adverbs-and-their-positions">
<h3>6.2.5.7. Finding all Adverbs and their Positions<a class=3D"headerlink"=
 href=3D"https://docs.python.org/3/library/re.html#finding-all-adverbs-and-=
their-positions" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>If one wants more information about all matches of a pattern than the ma=
tched
text, <a class=3D"reference internal" href=3D"https://docs.python.org/3/lib=
rary/re.html#re.finditer" title=3D"re.finditer"><code class=3D"xref py py-f=
unc docutils literal"><span class=3D"pre">finditer()</span></code></a> is u=
seful as it provides <a class=3D"reference internal" href=3D"https://docs.p=
ython.org/3/library/re.html#match-objects"><span>match objects</span></a> i=
nstead of strings.  Continuing with the previous example, if
one was a writer who wanted to find all of the adverbs <em>and their positi=
ons</em> in
some text, he or she would use <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/library/re.html#re.finditer" title=3D"re.finditer"><c=
ode class=3D"xref py py-func docutils literal"><span class=3D"pre">finditer=
()</span></code></a> in the following manner:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">text</s=
pan> <span class=3D"o">=3D</span> <span class=3D"s2">"He was carefully disg=
uised but captured quickly by police."</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">for</span> <span c=
lass=3D"n">m</span> <span class=3D"ow">in</span> <span class=3D"n">re</span=
><span class=3D"o">.</span><span class=3D"n">finditer</span><span class=3D"=
p">(</span><span class=3D"s2">r"\w+ly"</span><span class=3D"p">,</span> <sp=
an class=3D"n">text</span><span class=3D"p">):</span>
<span class=3D"gp">... </span>    <span class=3D"nb">print</span><span clas=
s=3D"p">(</span><span class=3D"s1">'</span><span class=3D"si">%02d</span><s=
pan class=3D"s1">-</span><span class=3D"si">%02d</span><span class=3D"s1">:=
 </span><span class=3D"si">%s</span><span class=3D"s1">'</span> <span class=
=3D"o">%</span> <span class=3D"p">(</span><span class=3D"n">m</span><span c=
lass=3D"o">.</span><span class=3D"n">start</span><span class=3D"p">(),</spa=
n> <span class=3D"n">m</span><span class=3D"o">.</span><span class=3D"n">en=
d</span><span class=3D"p">(),</span> <span class=3D"n">m</span><span class=
=3D"o">.</span><span class=3D"n">group</span><span class=3D"p">(</span><spa=
n class=3D"mi">0</span><span class=3D"p">)))</span>
<span class=3D"go">07-16: carefully</span>
<span class=3D"go">40-47: quickly</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"raw-string-notation">
<h3>6.2.5.8. Raw String Notation<a class=3D"headerlink" href=3D"https://doc=
s.python.org/3/library/re.html#raw-string-notation" title=3D"Permalink to t=
his headline">=C2=B6</a></h3>
<p>Raw string notation (<code class=3D"docutils literal"><span class=3D"pre=
">r"text"</span></code>) keeps regular expressions sane.  Without it,
every backslash (<code class=3D"docutils literal"><span class=3D"pre">'\'</=
span></code>) in a regular expression would have to be prefixed with
another one to escape it.  For example, the two following lines of code are
functionally identical:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</spa=
n><span class=3D"o">.</span><span class=3D"n">match</span><span class=3D"p"=
>(</span><span class=3D"s2">r"\W(.)\1\W"</span><span class=3D"p">,</span> <=
span class=3D"s2">" ff "</span><span class=3D"p">)</span>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(0, 4), match=3D' ff '=
&gt;</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">match</span><span class=3D"p">(</span><s=
pan class=3D"s2">"</span><span class=3D"se">\\</span><span class=3D"s2">W(.=
)</span><span class=3D"se">\\</span><span class=3D"s2">1</span><span class=
=3D"se">\\</span><span class=3D"s2">W"</span><span class=3D"p">,</span> <sp=
an class=3D"s2">" ff "</span><span class=3D"p">)</span>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(0, 4), match=3D' ff '=
&gt;</span>
</pre></div>
</div>
<p>When one wants to match a literal backslash, it must be escaped in the r=
egular
expression.  With raw string notation, this means <code class=3D"docutils l=
iteral"><span class=3D"pre">r"\\"</span></code>.  Without raw string
notation, one must use <code class=3D"docutils literal"><span class=3D"pre"=
>"\\\\"</span></code>, making the following lines of code
functionally identical:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><span class=3D"copybutton" title=3D"Hide the prompts and out=
put" style=3D"cursor: pointer; position: absolute; top: 0px; right: 0px; bo=
rder-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; col=
or: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; paddin=
g-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><s=
pan></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</spa=
n><span class=3D"o">.</span><span class=3D"n">match</span><span class=3D"p"=
>(</span><span class=3D"s2">r"</span><span class=3D"se">\\</span><span clas=
s=3D"s2">"</span><span class=3D"p">,</span> <span class=3D"s2">r"</span><sp=
an class=3D"se">\\</span><span class=3D"s2">"</span><span class=3D"p">)</sp=
an>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(0, 1), match=3D'\\'&g=
t;</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">re</span><span cla=
ss=3D"o">.</span><span class=3D"n">match</span><span class=3D"p">(</span><s=
pan class=3D"s2">"</span><span class=3D"se">\\\\</span><span class=3D"s2">"=
</span><span class=3D"p">,</span> <span class=3D"s2">r"</span><span class=
=3D"se">\\</span><span class=3D"s2">"</span><span class=3D"p">)</span>
<span class=3D"go">&lt;_sre.SRE_Match object; span=3D(0, 1), match=3D'\\'&g=
t;</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"writing-a-tokenizer">
<h3>6.2.5.9. Writing a Tokenizer<a class=3D"headerlink" href=3D"https://doc=
s.python.org/3/library/re.html#writing-a-tokenizer" title=3D"Permalink to t=
his headline">=C2=B6</a></h3>
<p>A <a class=3D"reference external" href=3D"https://en.wikipedia.org/wiki/=
Lexical_analysis">tokenizer or scanner</a>
analyzes a string to categorize groups of characters.  This is a useful fir=
st
step in writing a compiler or interpreter.</p>
<p>The text categories are specified with regular expressions.  The techniq=
ue is
to combine those into a single master regular expression and to loop over
successive matches:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"kn">import</span> <span cla=
ss=3D"nn">collections</span>
<span class=3D"kn">import</span> <span class=3D"nn">re</span>

<span class=3D"n">Token</span> <span class=3D"o">=3D</span> <span class=3D"=
n">collections</span><span class=3D"o">.</span><span class=3D"n">namedtuple=
</span><span class=3D"p">(</span><span class=3D"s1">'Token'</span><span cla=
ss=3D"p">,</span> <span class=3D"p">[</span><span class=3D"s1">'typ'</span>=
<span class=3D"p">,</span> <span class=3D"s1">'value'</span><span class=3D"=
p">,</span> <span class=3D"s1">'line'</span><span class=3D"p">,</span> <spa=
n class=3D"s1">'column'</span><span class=3D"p">])</span>

<span class=3D"k">def</span> <span class=3D"nf">tokenize</span><span class=
=3D"p">(</span><span class=3D"n">code</span><span class=3D"p">):</span>
    <span class=3D"n">keywords</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"p">{</span><span class=3D"s1">'IF'</span><span class=3D"p">,</span> =
<span class=3D"s1">'THEN'</span><span class=3D"p">,</span> <span class=3D"s=
1">'ENDIF'</span><span class=3D"p">,</span> <span class=3D"s1">'FOR'</span>=
<span class=3D"p">,</span> <span class=3D"s1">'NEXT'</span><span class=3D"p=
">,</span> <span class=3D"s1">'GOSUB'</span><span class=3D"p">,</span> <spa=
n class=3D"s1">'RETURN'</span><span class=3D"p">}</span>
    <span class=3D"n">token_specification</span> <span class=3D"o">=3D</spa=
n> <span class=3D"p">[</span>
        <span class=3D"p">(</span><span class=3D"s1">'NUMBER'</span><span c=
lass=3D"p">,</span>  <span class=3D"s1">r'\d+(\.\d*)?'</span><span class=3D=
"p">),</span>  <span class=3D"c1"># Integer or decimal number</span>
        <span class=3D"p">(</span><span class=3D"s1">'ASSIGN'</span><span c=
lass=3D"p">,</span>  <span class=3D"s1">r':=3D'</span><span class=3D"p">),<=
/span>           <span class=3D"c1"># Assignment operator</span>
        <span class=3D"p">(</span><span class=3D"s1">'END'</span><span clas=
s=3D"p">,</span>     <span class=3D"s1">r';'</span><span class=3D"p">),</sp=
an>            <span class=3D"c1"># Statement terminator</span>
        <span class=3D"p">(</span><span class=3D"s1">'ID'</span><span class=
=3D"p">,</span>      <span class=3D"s1">r'[A-Za-z]+'</span><span class=3D"p=
">),</span>    <span class=3D"c1"># Identifiers</span>
        <span class=3D"p">(</span><span class=3D"s1">'OP'</span><span class=
=3D"p">,</span>      <span class=3D"s1">r'[+\-*/]'</span><span class=3D"p">=
),</span>      <span class=3D"c1"># Arithmetic operators</span>
        <span class=3D"p">(</span><span class=3D"s1">'NEWLINE'</span><span =
class=3D"p">,</span> <span class=3D"s1">r'\n'</span><span class=3D"p">),</s=
pan>           <span class=3D"c1"># Line endings</span>
        <span class=3D"p">(</span><span class=3D"s1">'SKIP'</span><span cla=
ss=3D"p">,</span>    <span class=3D"s1">r'[ \t]+'</span><span class=3D"p">)=
,</span>       <span class=3D"c1"># Skip over spaces and tabs</span>
        <span class=3D"p">(</span><span class=3D"s1">'MISMATCH'</span><span=
 class=3D"p">,</span><span class=3D"s1">r'.'</span><span class=3D"p">),</sp=
an>            <span class=3D"c1"># Any other character</span>
    <span class=3D"p">]</span>
    <span class=3D"n">tok_regex</span> <span class=3D"o">=3D</span> <span c=
lass=3D"s1">'|'</span><span class=3D"o">.</span><span class=3D"n">join</spa=
n><span class=3D"p">(</span><span class=3D"s1">'(?P&lt;</span><span class=
=3D"si">%s</span><span class=3D"s1">&gt;</span><span class=3D"si">%s</span>=
<span class=3D"s1">)'</span> <span class=3D"o">%</span> <span class=3D"n">p=
air</span> <span class=3D"k">for</span> <span class=3D"n">pair</span> <span=
 class=3D"ow">in</span> <span class=3D"n">token_specification</span><span c=
lass=3D"p">)</span>
    <span class=3D"n">line_num</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"mi">1</span>
    <span class=3D"n">line_start</span> <span class=3D"o">=3D</span> <span =
class=3D"mi">0</span>
    <span class=3D"k">for</span> <span class=3D"n">mo</span> <span class=3D=
"ow">in</span> <span class=3D"n">re</span><span class=3D"o">.</span><span c=
lass=3D"n">finditer</span><span class=3D"p">(</span><span class=3D"n">tok_r=
egex</span><span class=3D"p">,</span> <span class=3D"n">code</span><span cl=
ass=3D"p">):</span>
        <span class=3D"n">kind</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">mo</span><span class=3D"o">.</span><span class=3D"n">lastgroup</s=
pan>
        <span class=3D"n">value</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">mo</span><span class=3D"o">.</span><span class=3D"n">group</span=
><span class=3D"p">(</span><span class=3D"n">kind</span><span class=3D"p">)=
</span>
        <span class=3D"k">if</span> <span class=3D"n">kind</span> <span cla=
ss=3D"o">=3D=3D</span> <span class=3D"s1">'NEWLINE'</span><span class=3D"p"=
>:</span>
            <span class=3D"n">line_start</span> <span class=3D"o">=3D</span=
> <span class=3D"n">mo</span><span class=3D"o">.</span><span class=3D"n">en=
d</span><span class=3D"p">()</span>
            <span class=3D"n">line_num</span> <span class=3D"o">+=3D</span>=
 <span class=3D"mi">1</span>
        <span class=3D"k">elif</span> <span class=3D"n">kind</span> <span c=
lass=3D"o">=3D=3D</span> <span class=3D"s1">'SKIP'</span><span class=3D"p">=
:</span>
            <span class=3D"k">pass</span>
        <span class=3D"k">elif</span> <span class=3D"n">kind</span> <span c=
lass=3D"o">=3D=3D</span> <span class=3D"s1">'MISMATCH'</span><span class=3D=
"p">:</span>
            <span class=3D"k">raise</span> <span class=3D"ne">RuntimeError<=
/span><span class=3D"p">(</span><span class=3D"n">f</span><span class=3D"s1=
">'</span><span class=3D"si">{value!r}</span><span class=3D"s1"> unexpected=
 on line </span><span class=3D"si">{line_num}</span><span class=3D"s1">'</s=
pan><span class=3D"p">)</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"k">if</span> <span class=3D"n">kind</span> <span=
 class=3D"o">=3D=3D</span> <span class=3D"s1">'ID'</span> <span class=3D"ow=
">and</span> <span class=3D"n">value</span> <span class=3D"ow">in</span> <s=
pan class=3D"n">keywords</span><span class=3D"p">:</span>
                <span class=3D"n">kind</span> <span class=3D"o">=3D</span> =
<span class=3D"n">value</span>
            <span class=3D"n">column</span> <span class=3D"o">=3D</span> <s=
pan class=3D"n">mo</span><span class=3D"o">.</span><span class=3D"n">start<=
/span><span class=3D"p">()</span> <span class=3D"o">-</span> <span class=3D=
"n">line_start</span>
            <span class=3D"k">yield</span> <span class=3D"n">Token</span><s=
pan class=3D"p">(</span><span class=3D"n">kind</span><span class=3D"p">,</s=
pan> <span class=3D"n">value</span><span class=3D"p">,</span> <span class=
=3D"n">line_num</span><span class=3D"p">,</span> <span class=3D"n">column</=
span><span class=3D"p">)</span>

<span class=3D"n">statements</span> <span class=3D"o">=3D</span> <span clas=
s=3D"s1">'''</span>
<span class=3D"s1">    IF quantity THEN</span>
<span class=3D"s1">        total :=3D total + price * quantity;</span>
<span class=3D"s1">        tax :=3D price * 0.05;</span>
<span class=3D"s1">    ENDIF;</span>
<span class=3D"s1">'''</span>

<span class=3D"k">for</span> <span class=3D"n">token</span> <span class=3D"=
ow">in</span> <span class=3D"n">tokenize</span><span class=3D"p">(</span><s=
pan class=3D"n">statements</span><span class=3D"p">):</span>
    <span class=3D"nb">print</span><span class=3D"p">(</span><span class=3D=
"n">token</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>The tokenizer produces the following output:</p>
<div class=3D"highlight-python3" style=3D"position: relative;"><div class=
=3D"highlight"><pre><span></span><span class=3D"n">Token</span><span class=
=3D"p">(</span><span class=3D"n">typ</span><span class=3D"o">=3D</span><spa=
n class=3D"s1">'IF'</span><span class=3D"p">,</span> <span class=3D"n">valu=
e</span><span class=3D"o">=3D</span><span class=3D"s1">'IF'</span><span cla=
ss=3D"p">,</span> <span class=3D"n">line</span><span class=3D"o">=3D</span>=
<span class=3D"mi">2</span><span class=3D"p">,</span> <span class=3D"n">col=
umn</span><span class=3D"o">=3D</span><span class=3D"mi">4</span><span clas=
s=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ID'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'quantity'</span><span class=3D"p">,</span> <span clas=
s=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">2</span><=
span class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">7</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'THEN'</span><span =
class=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</s=
pan><span class=3D"s1">'THEN'</span><span class=3D"p">,</span> <span class=
=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">2</span><s=
pan class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">16</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ID'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'total'</span><span class=3D"p">,</span> <span class=
=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">3</span><s=
pan class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">8</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ASSIGN'</span><spa=
n class=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D<=
/span><span class=3D"s1">':=3D'</span><span class=3D"p">,</span> <span clas=
s=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">3</span><=
span class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">14</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ID'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'total'</span><span class=3D"p">,</span> <span class=
=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">3</span><s=
pan class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">17</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'OP'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'+'</span><span class=3D"p">,</span> <span class=3D"n"=
>line</span><span class=3D"o">=3D</span><span class=3D"mi">3</span><span cl=
ass=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=3D</sp=
an><span class=3D"mi">23</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ID'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'price'</span><span class=3D"p">,</span> <span class=
=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">3</span><s=
pan class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">25</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'OP'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'*'</span><span class=3D"p">,</span> <span class=3D"n"=
>line</span><span class=3D"o">=3D</span><span class=3D"mi">3</span><span cl=
ass=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=3D</sp=
an><span class=3D"mi">31</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ID'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'quantity'</span><span class=3D"p">,</span> <span clas=
s=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">3</span><=
span class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">33</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'END'</span><span c=
lass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</sp=
an><span class=3D"s1">';'</span><span class=3D"p">,</span> <span class=3D"n=
">line</span><span class=3D"o">=3D</span><span class=3D"mi">3</span><span c=
lass=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=3D</s=
pan><span class=3D"mi">41</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ID'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'tax'</span><span class=3D"p">,</span> <span class=3D"=
n">line</span><span class=3D"o">=3D</span><span class=3D"mi">4</span><span =
class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=3D</=
span><span class=3D"mi">8</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ASSIGN'</span><spa=
n class=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D<=
/span><span class=3D"s1">':=3D'</span><span class=3D"p">,</span> <span clas=
s=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">4</span><=
span class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">12</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ID'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'price'</span><span class=3D"p">,</span> <span class=
=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">4</span><s=
pan class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">15</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'OP'</span><span cl=
ass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</spa=
n><span class=3D"s1">'*'</span><span class=3D"p">,</span> <span class=3D"n"=
>line</span><span class=3D"o">=3D</span><span class=3D"mi">4</span><span cl=
ass=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=3D</sp=
an><span class=3D"mi">21</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'NUMBER'</span><spa=
n class=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D<=
/span><span class=3D"s1">'0.05'</span><span class=3D"p">,</span> <span clas=
s=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">4</span><=
span class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">23</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'END'</span><span c=
lass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</sp=
an><span class=3D"s1">';'</span><span class=3D"p">,</span> <span class=3D"n=
">line</span><span class=3D"o">=3D</span><span class=3D"mi">4</span><span c=
lass=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=3D</s=
pan><span class=3D"mi">27</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'ENDIF'</span><span=
 class=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</=
span><span class=3D"s1">'ENDIF'</span><span class=3D"p">,</span> <span clas=
s=3D"n">line</span><span class=3D"o">=3D</span><span class=3D"mi">5</span><=
span class=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=
=3D</span><span class=3D"mi">4</span><span class=3D"p">)</span>
<span class=3D"n">Token</span><span class=3D"p">(</span><span class=3D"n">t=
yp</span><span class=3D"o">=3D</span><span class=3D"s1">'END'</span><span c=
lass=3D"p">,</span> <span class=3D"n">value</span><span class=3D"o">=3D</sp=
an><span class=3D"s1">';'</span><span class=3D"p">,</span> <span class=3D"n=
">line</span><span class=3D"o">=3D</span><span class=3D"mi">5</span><span c=
lass=3D"p">,</span> <span class=3D"n">column</span><span class=3D"o">=3D</s=
pan><span class=3D"mi">9</span><span class=3D"p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class=3D"sphinxsidebar" role=3D"navigation" aria-label=3D"main n=
avigation">
        <div class=3D"sphinxsidebarwrapper" style=3D"float: left; margin-ri=
ght: 0px; width: 202px;">
  <h3><a href=3D"https://docs.python.org/3/contents.html">Table Of Contents=
</a></h3>
  <ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#">6.2. <code class=3D"docutils literal"><span class=3D"pre">re</=
span></code> =E2=80=94 Regular expression operations</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#regular-expression-syntax">6.2.1. Regular Expression Syntax</a><=
/li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#module-contents">6.2.2. Module Contents</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#regular-expression-objects">6.2.3. Regular Expression Objects</a=
></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#match-objects">6.2.4. Match Objects</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#regular-expression-examples">6.2.5. Regular Expression Examples<=
/a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#checking-for-a-pair">6.2.5.1. Checking for a Pair</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#simulating-scanf">6.2.5.2. Simulating scanf()</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#search-vs-match">6.2.5.3. search() vs. match()</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#making-a-phonebook">6.2.5.4. Making a Phonebook</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#text-munging">6.2.5.5. Text Munging</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#finding-all-adverbs">6.2.5.6. Finding all Adverbs</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#finding-all-adverbs-and-their-positions">6.2.5.7. Finding all Ad=
verbs and their Positions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#raw-string-notation">6.2.5.8. Raw String Notation</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/re.html#writing-a-tokenizer">6.2.5.9. Writing a Tokenizer</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/string.=
html" title=3D"previous chapter">6.1. <code class=3D"docutils literal"><spa=
n class=3D"pre">string</span></code> =E2=80=94 Common string operations</a>=
</p>
  <h4>Next topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/difflib=
.html" title=3D"next chapter">6.3. <code class=3D"docutils literal"><span c=
lass=3D"pre">difflib</span></code> =E2=80=94 Helpers for computing deltas</=
a></p>
  <div role=3D"note" aria-label=3D"source link">
    <h3>This Page</h3>
    <ul class=3D"this-page-menu">
      <li><a href=3D"https://docs.python.org/3/bugs.html">Report a Bug</a><=
/li>
      <li>
        <a href=3D"https://github.com/python/cpython/blob/3.6/Doc/library/r=
e.rst" rel=3D"nofollow">Show Source
        </a>
      </li>
    </ul>
  </div>
        </div>
      <div id=3D"sidebarbutton" title=3D"Collapse sidebar" style=3D"border-=
radius: 0px 5px 5px 0px; color: rgb(68, 68, 68); background-color: rgb(204,=
 204, 204); font-size: 1.2em; cursor: pointer; height: 21420px; padding-top=
: 1px; padding-left: 1px; margin-left: 218px;"><span style=3D"display: bloc=
k; position: fixed; top: 314.5px;">=C2=AB</span></div></div>
      <div class=3D"clearer"></div>
    </div> =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/difflib.html" title=
=3D"6.3. difflib =E2=80=94 Helpers for computing deltas">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/string.html" title=
=3D"6.1. string =E2=80=94 Common string operations">previous</a> |</li>
        <li><img src=3D"https://docs.python.org/3/_static/py.png" alt=3D"" =
style=3D"vertical-align: middle; margin-top: -1px"></li>
        <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
        <li>
          <span class=3D"version_switcher_placeholder"><select disabled=3D"=
"><option value=3D"3.7">dev (3.7)</option><option value=3D"3.6" selected=3D=
"selected">3.6.2</option><option value=3D"3.5">3.5</option><option value=3D=
"3.4">3.4</option><option value=3D"3.3">3.3</option><option value=3D"2.7">2=
.7</option></select></span>
          <a href=3D"https://docs.python.org/3/index.html">Documentation </=
a> =C2=BB
        </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/library/index.html">The Python Standard Library</a> =C2=BB</li>
          <li class=3D"nav-item nav-item-2"><a href=3D"https://docs.python.=
org/3/library/text.html">6. Text Processing Services</a> =C2=BB</li>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get" style=3D"display: inline;">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q" disa=
bled=3D"">
          <input type=3D"submit" value=3D"Go" disabled=3D"">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div> =20
    <div class=3D"footer">
    =C2=A9 <a href=3D"https://docs.python.org/3/copyright.html">Copyright</=
a> 2001-2017, Python Software Foundation.
    <br>
    The Python Software Foundation is a non-profit corporation.
    <a href=3D"https://www.python.org/psf/donations/">Please donate.</a>
    <br>
    Last updated on Aug 01, 2017.
    <a href=3D"https://docs.python.org/3/bugs.html">Found a bug</a>?
    <br>
    Created using <a href=3D"http://sphinx.pocoo.org/">Sphinx</a> 1.3.3.
    </div>

 =20
</body></html>
------MultipartBoundary--FETIAD2UH2Fhb0MSFrWeatburud8jEgIdVow5ihmts----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pydoctheme.css

@charset "utf-8";

@import url("default.css");

body { background-color: white; margin-left: 1em; margin-right: 1em; }

div.related { margin-bottom: 1.2em; padding: 0.5em 0px; border-top: 1px sol=
id rgb(204, 204, 204); margin-top: 0.5em; }

div.related a:hover { color: rgb(0, 149, 196); }

div.related:first-child { border-top: 0px; border-bottom: 1px solid rgb(204=
, 204, 204); }

.inline-search { display: inline; }

form.inline-search input { display: inline; }

form.inline-search input[type=3D"submit"] { width: 30px; }

div.sphinxsidebar { background-color: rgb(238, 238, 238); border-radius: 5p=
x; line-height: 130%; font-size: smaller; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { margin-top: 1.5em; }

div.sphinxsidebarwrapper > h3:first-child { margin-top: 0.2em; }

div.sphinxsidebarwrapper > ul > li > ul > li { margin-bottom: 0.4em; }

div.sphinxsidebar a:hover { color: rgb(0, 149, 196); }

form.inline-search input, div.sphinxsidebar input { font-family: "Lucida Gr=
ande", Arial, sans-serif; border: 1px solid rgb(153, 153, 153); font-size: =
smaller; border-radius: 3px; }

div.sphinxsidebar input[type=3D"text"] { max-width: 150px; }

div.body { padding: 0px 0px 0px 1.2em; }

div.body p { line-height: 140%; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { margin: 0px; border: 0px; padding: 0.3em 0px; }

div.body hr { border: 0px; background-color: rgb(204, 204, 204); height: 1p=
x; }

div.body pre { border-radius: 3px; border: 1px solid rgb(170, 204, 153); }

div.body div.admonition, div.body div.impl-detail { border-radius: 3px; }

div.body div.impl-detail > p { margin: 0px; }

div.body div.seealso { border: 1px solid rgb(221, 221, 102); }

div.body a { color: rgb(0, 114, 170); }

div.body a:visited { color: rgb(99, 99, 187); }

div.body a:hover { color: rgb(0, 176, 228); }

tt, code, pre { font-family: monospace, sans-serif; font-size: 96.5%; }

div.body tt, div.body code { border-radius: 3px; }

div.body tt.descname, div.body code.descname { font-size: 120%; }

div.body tt.xref, div.body a tt, div.body code.xref, div.body a code { font=
-weight: normal; }

.deprecated { border-radius: 3px; }

table.docutils { border: 1px solid rgb(221, 221, 221); min-width: 20%; bord=
er-radius: 3px; margin-top: 10px; margin-bottom: 10px; }

table.docutils td, table.docutils th { border-radius: 3px; border: 1px soli=
d rgb(221, 221, 221) !important; }

table p, table li { text-align: left !important; }

table.docutils th { background-color: rgb(238, 238, 238); padding: 0.3em 0.=
5em; }

table.docutils td { background-color: white; padding: 0.3em 0.5em; }

table.footnote, table.footnote td { border: 0px !important; }

div.footer { line-height: 150%; margin-top: -2em; text-align: right; width:=
 auto; margin-right: 10px; }

div.footer a:hover { color: rgb(0, 149, 196); }

.refcount { color: rgb(0, 102, 0); }

.stableabi { color: rgb(34, 34, 153); }

.highlight { background: none !important; }
------MultipartBoundary--FETIAD2UH2Fhb0MSFrWeatburud8jEgIdVow5ihmts----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/default.css

@charset "utf-8";

@import url("classic.css");
------MultipartBoundary--FETIAD2UH2Fhb0MSFrWeatburud8jEgIdVow5ihmts----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/classic.css

@charset "utf-8";

@import url("basic.css");

body { font-family: "Lucida Grande", Arial, sans-serif; font-size: 100%; ba=
ckground-color: white; color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { background-color: white; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 230px; }

div.body { background-color: white; color: rgb(34, 34, 34); padding: 0px 20=
px 30px; }

div.footer { color: rgb(85, 85, 85); width: 100%; padding: 9px 0px; text-al=
ign: center; font-size: 75%; }

div.footer a { color: rgb(85, 85, 85); text-decoration: underline; }

div.related { background-color: white; line-height: 30px; color: rgb(102, 1=
02, 102); }

div.related a { color: rgb(68, 68, 68); }

div.sphinxsidebar { }

div.sphinxsidebar h3 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.4em; font-weight: normal; margin: 0px; pa=
dding: 0px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar h4 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.3em; font-weight: normal; margin: 5px 0px=
 0px; padding: 0px; }

div.sphinxsidebar p { color: rgb(68, 68, 68); }

div.sphinxsidebar p.topless { margin: 5px 10px 10px; }

div.sphinxsidebar ul { margin: 10px; padding: 0px; color: rgb(68, 68, 68); =
}

div.sphinxsidebar a { color: rgb(68, 68, 68); }

div.sphinxsidebar input { border: 1px solid rgb(68, 68, 68); font-family: s=
ans-serif; font-size: 1em; }

div#sidebarbutton { background-color: rgb(60, 110, 131); }

a { color: rgb(0, 144, 192); text-decoration: none; }

a:visited { color: rgb(0, 96, 143); text-decoration: none; }

a:hover { text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { font-family: "Lucida Grande", Arial, sans-serif; background-color: whit=
e; font-weight: normal; color: rgb(26, 26, 26); border-bottom: 1px solid rg=
b(204, 204, 204); margin: 20px -20px 10px; padding: 3px 0px 3px 10px; }

div.body h1 { margin-top: 0px; font-size: 200%; }

div.body h2 { font-size: 160%; }

div.body h3 { font-size: 140%; }

div.body h4 { font-size: 120%; }

div.body h5 { font-size: 110%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(170, 170, 170); font-size: 0.8em; padding: 0px 4p=
x; text-decoration: none; }

a.headerlink:hover { background-color: rgb(170, 170, 170); color: white; }

div.body p, div.body dd, div.body li { text-align: justify; line-height: 13=
0%; }

div.admonition p.admonition-title + p { display: inline; }

div.admonition p { margin-bottom: 5px; }

div.admonition pre { margin-bottom: 5px; }

div.admonition ul, div.admonition ol { margin-bottom: 5px; }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204,=
 204, 204); }

div.seealso { background-color: rgb(255, 255, 204); border: 1px solid rgb(2=
55, 255, 102); }

div.topic { background-color: rgb(238, 238, 238); }

div.warning { background-color: rgb(255, 228, 228); border: 1px solid rgb(2=
55, 102, 102); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre { padding: 5px; background-color: rgb(238, 255, 204); color: rgb(51, 51=
, 51); line-height: 120%; border-top: 1px solid rgb(170, 204, 153); border-=
bottom: 1px solid rgb(170, 204, 153); border-image: initial; border-left: n=
one; border-right: none; }

code { background-color: rgb(236, 240, 243); padding: 0px 1px; font-size: 0=
.95em; }

th { background-color: rgb(238, 221, 238); }

.warning code { background: rgb(239, 194, 194); }

.note code { background: rgb(214, 214, 214); }

.viewcode-back { font-family: "Lucida Grande", Arial, sans-serif; }

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-to=
p: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153=
); }

div.code-block-caption { color: rgb(239, 239, 239); background-color: rgb(2=
8, 78, 99); }
------MultipartBoundary--FETIAD2UH2Fhb0MSFrWeatburud8jEgIdVow5ihmts----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; =
}

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-siz=
e: 90%; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20=
px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox input[type=3D"text"] { width: 170px; }

div.sphinxsidebar #searchbox input[type=3D"submit"] { width: 30px; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png")=
; background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 3=
0px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable dl, table.indextable dd { margin-top: 0px; margin-bottom: =
0px; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242,=
 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

a.headerlink { visibility: hidden; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, =
h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, =
dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.=
headerlink, div.code-block-caption:hover > a.headerlink { visibility: visib=
le; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.field-list ul { padding-left: 1em; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, .figure.align-left, object.align-left { clear: left; float:=
 left; margin-right: 1em; }

img.align-right, .figure.align-right, object.align-right { clear: right; fl=
oat: right; margin-left: 1em; }

img.align-center, .figure.align-center, object.align-center { display: bloc=
k; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-right { text-align: right; }

div.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 18=
7); padding: 7px 7px 0px; background-color: rgb(255, 255, 238); width: 40%;=
 float: right; }

p.sidebar-title { font-weight: bold; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px 7px 0px; mar=
gin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

div.admonition dl { margin-bottom: 0px; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

table.docutils { border: 0px; border-collapse: collapse; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-wid=
th: 0px 0px 1px; border-top-style: initial; border-top-color: initial; bord=
er-left-style: initial; border-left-color: initial; border-right-style: ini=
tial; border-right-color: initial; border-bottom-style: solid; border-botto=
m-color: rgb(170, 170, 170); }

table.field-list td, table.field-list th { border: 0px !important; }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

div.figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption { padding: 0.3em; }

div.figure p.caption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text { }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

dl { margin-bottom: 15px; }

dd p { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dt:target, .highlighted { background-color: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; borde=
r: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left:=
 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow-x: auto; overflow-y: hidden; }

td.linenos pre { padding: 5px 0px; border: 0px; background-color: transpare=
nt; color: rgb(170, 170, 170); }

table.highlighttable { margin-left: 0.5em; }

table.highlighttable td { padding: 0px 0.5em; }

div.code-block-caption { padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

div.code-block-caption + div > div.highlight > pre { margin-top: 0px; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-sty=
le: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { padding: 1em 1em 0px; }

div.literal-block-wrapper div.highlight { margin: 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size=
: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: tr=
ansparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin:=
 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--FETIAD2UH2Fhb0MSFrWeatburud8jEgIdVow5ihmts----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pygments.css

@charset "utf-8";

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, =
240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--FETIAD2UH2Fhb0MSFrWeatburud8jEgIdVow5ihmts----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.python.org/3/_static/py.png

iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A
/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9gEGxE4IQYzJ14AAAI3SURBVDjL
ZZNPSFVBFIe/e9+zd3silBCl0SZoU4s2rVq0EB5tQip4UNvATVGu3QRBiyAi2iltWkgbF5EgRhFF
RpiWtrWIzDIV1Pzz7p15M2fmtvDevOqBw8DM9zvnN8ycgF3R/eDtM2mac96ZdrFNxBikqbRV+vHH
/ut9gAZczoe7C3gnF0f6au1OLM5avFi8d1Ea+JvAMSAq8nsKOGs5f2cYJ3Y7rc2PO4BqkS8DdD98
f9tbe1ysCoxOBo1qlEXHJWcM4b5KPU19zleA0o4Clx99eO3EdqVewHsCoFRugUoVghJO7A6H6Vx9
wdtYi27cr5x6dy/03nVtWTU7bWeZh6jNUcAiCaFTURl9A+gs56AviHzh3mnqtdPxm6knfQPLU7Ua
okASQq/agY7yDrG16Mba6Pz48NP56VdrgAApYObGaicPtkovToFLQBKA/WUxTe3FRk4san15aGKg
d3Dj560rrdGJS6FT0X9YYvLuiMKL1kAQOpHZ3PqfyZfP41+9PW1VfzX0RXFSECfgNEmSTgImdDru
F2O0E8vvqZG1auQubAsKooIYYHpGvwA2g+xndQBHgWa6cG0ih5cW/w6VvEq3nChwCoBvs+bL2Z7V
ceBHGTDAIrABpMVuhw+4OiLgLIglOLPYBTQAlfErIeCzjRVg1dtEb1kt5Omv+DTV2YssAN+zNdkz
C42N9brV8WdvYp07seOdM2Of1F3AAknW0AJpwN6IgEPAEaANaMlcbmZdl7KRBuAfAb+v//yMAJoA
AAAASUVORK5CYII=
------MultipartBoundary--FETIAD2UH2Fhb0MSFrWeatburud8jEgIdVow5ihmts------
